participant "UMA Server\nfoo.com" as asServer #lightpink
participant "Resource Server (RS)\nfoo.com" as rsServer #lightpink
participant "RqP Client\nbar.com" as rqpClient #lightsteelblue
participant "Claims Provider (CP)\nbar.com" as claimsProvider #lightsteelblue
participant "OIDC Server\nbar.com" as authServer #lightsteelblue

bottomparticipants

note over rsServer:foo.com admin has set up the RS and registers it's 'RS API' resource\nat the foo.com UMA Server with the associated scope 'get'
note over rqpClient:RqP Client:\n• is registered at bar.com OIDC Server and pre-registered as a universal public client at foo.com UMA Server
note over claimsProvider:Claims Provider:\n• publishes its metadata on a URL https://bar.com/.well-known/claims-provider-configuration
rsServer<-rqpClient:1. Request to 'RS API' resource\n(scope=get)
rsServer->rqpClient:2. 401 with permission ticket
rqpClient->authServer:3. Get access_token\n(grant_type=client_credentials, scope=claims-provider)
rqpClient<-authServer:4. Return access_token "audience":["claims-provider"]
rqpClient->rqpClient:5. ticket_challenge = Base64URL-Encode(SHA256(ticket))
claimsProvider<-rqpClient:6. Get claims_token\n(access_token "audience":["claims-provider"],\n ticket_challenge, scope=universal-app)
rqpClient<-claimsProvider:7. Return claims_token\n(user_claims, audience:[universal-app])\n if the payload is large, consider using PCT (see UMA specs. for details)

rqpClient->asServer:8. Call token endpoint\n(ticket, pushed_claims=claims_token "audience":["universal-app"])
note over asServer:In addition to claims_token, pushed claims may also contain metadata such as:\n• requester_info (email address, fullname)\n• file_info (filename, file size, file digest, mime type)
group Authorization process
note over asServer:1. extract user_claims from claims_token\n2. select email_address claim\n3. bootstrap discovery of Claims Provider config url from email address via WebFinger;\n    if this doesn't work, build well-known url using domain part of email_address\n4. verify claims_token signature\n5. check audience=universal-app\n6. extract ticket_challenge claim from claims_token\n7. compare ticket_challenge vs. Base64URL-Encode(SHA256(ticket))\n8. evaluate user_claims\n9. evaluate other optional claims e.g. recipient_info, file_info
end
rqpClient<-asServer:9. Return RPT
rsServer<-rqpClient:10. Get data from foo.com 'RS API' resource\n(RPT)
rsServer->rqpClient:11. 200 OK