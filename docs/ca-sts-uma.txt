participant "Security Token Service (STS)" as stsServer
participant "RqP Client" as rqpClient
participant "Resource Server (RS)" as rsServer
participant "UMA Server" as asServer

bottomparticipants

note over stsServer:STS is part of OIDC provider:\n• publishes its metadata on a URL .well-known/openid-configuration
note over rqpClient:RqP Client:\n• a user is authenticated at OIDC provider, RqP Client has an access token\n• is registered at UMA Server as a public or confidential client
note over rsServer:admin has set up the RS and registers it's 'RS API' resource\nat the UMA Server with the associated scope 'get'
rsServer<-rqpClient:1. Request to 'RS API' resource\n    (scope=get)
rsServer->rqpClient:2. 401 with permission ticket
rqpClient->rqpClient:3. Create ticket challenge\n    ticket_challenge = Base64URL-Encode(SHA256(ticket))
stsServer<-rqpClient:4. Token exchange request\n    (grant_type=token-exchange, resource="RS API", ticket_challenge,\n      subject_token=access_token,\n      subject_token_type=urn:ietf:params:oauth:token-type:access_token\n      requested_token_type=urn:ietf:params:oauth:token-type:jwt)
group Authorization process
note over stsServer:1. evaluate the user_claims from access_token\n2. evaluate the resource
end
rqpClient<-stsServer:5. Return claims_token (user_claims + ticket_challenge, "aud":["RS API"])\n    if the payload is large, consider using PCT (see UMA specs. for details)

rqpClient->asServer:6. Call token endpoint\n(ticket, pushed_claims=claims_token "aud":["RS API"])
group Authorization process
note over asServer:1. extract user_claims from claims_token\n2. select email_address claim\n3. bootstrap discovery of OIDC provider config url from email address via WebFinger;\n    if this doesn't work, build well-known url using domain part of email_address\n4. verify claims_token signature\n5. check audience="RS API"\n6. extract ticket_challenge claim from claims_token\n7. compare ticket_challenge vs. Base64URL-Encode(SHA256(ticket))\n8. evaluate user_claims
end
rqpClient<-asServer:7. Return requesting party token\n    (RPT)
rsServer<-rqpClient:8. Get data from 'RS API' resource\n    (RPT)
rsServer->rqpClient:9. 200 OK