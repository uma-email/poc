Title UMA-compliant communications platform - Alice to Bob (push data) - Alice involved

actor "Alice (RqP)\nsender\nalice@foo.com" as Alice #lightpink
participant "IAM Server\nfoo.com" as authServer #lightpink
participant "Claims Provider (CP)\nfoo.com" as claimsProvider #lightpink
participant "RqP Client\nfoo.com" as rqpClient #lightpink
participant "Resource Server (RS)\nbar.com" as rsServer #lightsteelblue
participant "UMA Server\nbar.com" as asServer #lightsteelblue
actor "Bob (RO)\nrecipient\nbob@bar.com" as Bob #lightsteelblue

bottomparticipants

note over claimsProvider:Claims Provider:\n• publishes its metadata on a URL https://foo.com/.well-known/claims-provider-configuration\n• is registered at Alice's IAM Server and is assigned 'query-users', 'view-users' admin roles, thus can query and view any user to get their claims
note over rqpClient:RqP Client:\n• is registered at foo.com IAM Server and pre-registered as a universal AEMS public client at bar.com UMA Server
note over rsServer:bar.com admin has set up the Resource Server and registers it's resource\n'Incoming' at the bar.com UMA Server with the associated scope 'create'
Alice->rqpClient:Initiate the request
rqpClient->rsServer:1. Request Bob's 'Incoming' resource\n(scope=create)
rqpClient<-rsServer:2. 401 with permission ticket
authServer<-rqpClient:3. Get access_token\n(grant_type=authorization_code, scope=claims-provider)
authServer->rqpClient:4. Return access_token "audience":["claims-provider"]
note over rqpClient:• ticket_challenge = Base64URL-Encode(SHA256(ticket))
claimsProvider<-rqpClient:5. Get claims_token\n(access_token "audience":["claims-provider"],\n ticket_challenge, scope=aems-app)


claimsProvider->rqpClient:6. Return claims_token\n(Alice's user_claims, audience:[aems-app])\n if the payload is large, consider using PCT (see UMA specs. for details)
rqpClient->asServer:7. Call token endpoint\n(ticket, pushed_claims=claims_token "audience":["aems-app"])
note over asServer:In addition to claims_token, pushed claims may also contain metadata such as:\n• recipient_info (email address, fullname)\n• file_info (filename, file size, file digest, mime type)
group Authorization process
note over asServer:1. extract user_claims from claims_token\n2. select email_address claim\n3. bootstrap discovery of Claims Provider config url from email address via WebFinger;\n    if this doesn't work, build well-known url using domain part of email_address\n4. verify claims_token signature\n5. check audience=aems-agent\n6. extract ticket_challenge claim from claims_token\n7. compare ticket_challenge vs. Base64URL-Encode(SHA256(ticket))\n8. evaluate user_claims\n9. evaluate other optional claims e.g. recipient_info, file_info
end
rqpClient<-asServer:8. Return RPT
rqpClient->rsServer:9. Post data into Bob's 'Incoming' resource\n(RPT)
rqpClient<-rsServer:10. 201 Created