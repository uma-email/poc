Title UMA wide ecosystem - Alice to Bob (push data)

actor "RqP\nAlice" as Alice #lightpink
participant "AuthN Server" as authServer #lightpink
participant "Claims Provider (CP)" as claimsProvider #lightpink
participant "RqP Client" as rqpClient #lightpink
participant "Resource Server (RS)" as rsServer #lightsteelblue
participant "AuthZ Server" as asServer #lightsteelblue
actor "RO\nBob" as Bob #lightsteelblue

bottomparticipants

note over rqpClient:RqP Client is registered on Alice's AuthN server as a confidential client and on Bob's AuthZ server as a public client
note over claimsProvider:Claims Provider publishes its metadata on a URL .well-known/claims-provider-configuration
Alice->rqpClient:Initiate request
rqpClient->rsServer:1. Request Bob's 'Incoming' resource
rqpClient<-rsServer:2. 401 with permission ticket
alt RqP Client uses Authorization Code Grant - Alice is involved
authServer<-rqpClient:3. a) Get access_token\n(grant_type=authorizatin_code, scope=claims-provider)
else RqP Client uses Client Credential Grant - Alice is not involved
authServer<-rqpClient:3. b) Get access_token\n(grant_type=client_credentials, scope=claims-provider)
end
authServer->rqpClient:4. Return access_token
note right of rqpClient:Create ticket_digest
alt RqP Client uses Authorization Code Grant - Alice is involved
claimsProvider<-rqpClient:5. a) Get claims_token\n(access_token, ticket_digest)
else RqP Client uses Client Credential Grant - Alice is not involved
claimsProvider<-rqpClient:5. b) Get claims_token\n(access_token, Alice's email_address, ticket_digest)
end
note left of claimsProvider:Claims Provider is assigned 'query-users' admin role
authServer<-claimsProvider:6. Get access_token\n(grant_type=client_credentials)
authServer->claimsProvider:7. Return access_token

alt RqP Client uses Authorization Code Grant - Alice is involved
note left of claimsProvider:Use Alice's email_address extracted from access_token posted in a request at step 5. a)
authServer<-claimsProvider:8. a) Get Alice's user_claims\n(access_token, Alice's email_address)
else RqP Client uses Client Credential Grant - Alice is not involved
note left of claimsProvider:Use Alice's email_address extracted from a request body at step 5. b)
authServer<-claimsProvider:8. b) Get Alice's user_claims\n(access_token, Alice's email_address)
end
authServer->claimsProvider:9. Return Alice's user_claims

claimsProvider->rqpClient:10. Return claims_token\n(Alice's user_claims, ticket_digest)
rqpClient->asServer:11. Call token endpoint\n(client_id, ticket, pushed_claims=claims_token + metadata)
group Authorization process
note over asServer:AuthZ Server uses domain part of Alice's email_address extracted from claims_token\nto load Claims Provider configuration from URL:\n'https://' + domain_part_of_email_address + '/.well-known/claims-provider-configuration'
note over asServer:AuthZ Server evaluates:\n1. domain part of email_address\n2. ticket\n3. ticket_digest\n4. claims_token signature\n5. user_claims\n6. other_claims (recipient_info, file_info)
end
rqpClient<-asServer:12. Return RPT
rqpClient->rsServer:13. Post data into Bob's 'Incoming' resource\n(RPT)
rqpClient<-rsServer:14. 201 Created