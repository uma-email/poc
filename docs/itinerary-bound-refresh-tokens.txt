participant "Client" as client
participant "Authorization Server (AS)" as AS

bottomparticipants

note right of client:Client:\n• is registered at the AS as a confidential client and has a client secret\n• client has a Refresh Token issued by the AS
note right of AS:AS:\n• issues opaque Refresh Tokens and Access Tokens using high entropy nonce data strings
client->client:1. Client:\n a) computes the destination Route-MAC\n b) generates the destination Route-JWT with a payload including\n     the Refresh Token and a timestamp 
note right of client:The Route-MAC is computed as:\nRoute-MAC = HMAC-SHA256(Key, message)\nwhere\nKey = SHA256(client's client secret)\nmessage = Refresh Token
note right of client:The Route-JWT is generated as:\nRoute-JWT = header || "." || payload || "." || signature\nwhere\nheader = base64url({"typ":"JWT","alg":"HS256"})\npayload = base64url({"token":Refresh Token,"ts":timestamp})\nsignature = base64url(HMAC-SHA256(Key, message))\nwhere\nmessage = header || "." || payload\nKey = Route-MAC
client->AS:2. Route JWT
note right of client:Client sends the destination Route-JWT in the Authorization header\nto authenticate itself to the AS token endpoint
AS->AS:3. AS:\n a) looks up the Refresh Token data using the token claim value from the Route-JWT, and checks the token state\n b) computes the destination Itinerary-MAC\n c) generates the destination Itinerary-JWT with the payload from the Route-JWT\n d) compares the destination Itinerary-JWT signature with the Route-JWT signature, they are equal,\n     the Refresh Token route and the Route-JWT have been verified,\n     the AS validates the ts (timestamp) claim value from the Route-JWT, if valid,\n     the AS may generate and return a new Refresh Token and a new Access Token
note right of AS:Itinerary-MAC and Itinerary-JWT are computed and generated in an analogous manner\nas Route-MAC and Route-JWT.
client<-AS:4. Refresh Token and Access Token
