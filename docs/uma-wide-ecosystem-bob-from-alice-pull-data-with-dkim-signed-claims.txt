Title UMA wide ecosystem - Bob from Alice (pull data) with DKIM signed claims

actor "Alice (RO)\nalice@gmail.com" as Alice #lightpink
participant "AuthZ Server\nfoo.com" as asServer #lightpink
participant "Resource Server (RS)\nfoo.com" as rsServer #lightpink
participant "RqP Client\nbar.com" as rqpClient #lightsteelblue
participant "Claims Provider (CP)\nbar.com" as claimsProvider #lightsteelblue
participant "SMTP Server\noutlook.com" as smtpServer #00a2ed
participant "IMAP Server\noutlook.com" as imapServer #00a2ed
participant "AuthN Server\nbar.com" as authServer #lightsteelblue
actor "Bob (RqP)\nbob@outlook.com" as Bob #lightsteelblue

bottomparticipants

note left of Bob:Bob has set up his mailbox to auto-forward emails sent from\nchallenge@bar.com to response@bar.com
box over claimsProvider:Claims Provider can send email messages from addresses challenge@bar.com and retrieve from response@bar.com
note over rqpClient:RqP Client is registered at Bob's AuthN server and pre-registered as a universal AEMS public client at Alice's AuthZ server
note left of rsServer:Resource Server registers it's resource set 'Incoming' and 'Outgoing'\nwith the Alice's AuthZ server with the associated scopes:\n'Outgoing': query\n'Incoming': write
note over claimsProvider:Claims Provider publishes its metadata on a URL https://bar.com/optional_path/.well-known/claims-provider-configuration
note right of claimsProvider:Claims Provider is registered at Bob's AuthN server and is assigned 'query-users' admin role
rqpClient<-Bob:Initiate request
rsServer<-rqpClient:1. Request Alice's 'Outgoing' resource
rsServer->rqpClient:2. 401 with permission ticket
alt RqP Client uses Authorization Code Grant - Bob is involved
rqpClient->authServer:3. a) Get access_token\n(grant_type=authorization_code, scope=claims-provider)
else RqP Client uses Client Credential Grant - Bob is not involved
rqpClient->authServer:3. b) Get access_token\n(grant_type=client_credentials, scope=claims-provider)
end
rqpClient<-authServer:4. Return access_token
note right of rqpClient:ticket_challenge = Base64URL-Encode(SHA256(ticket))
alt Get Claims  - Bob was involved at step  3. a)
note right of rqpClient:Bob's email_address is in access_token returned at step 3. a)
claimsProvider<-rqpClient:5. a) Get claims_token\n(access_token, ticket_challenge)
else Get Claims - Bob was not involved at step  3. b)
note right of rqpClient: The email_address is determined by RqP Client
claimsProvider<-rqpClient:5. b) Get claims_token\n(access_token, Bob's email_address, ticket_challenge)
end
note right of claimsProvider:Claims Provider is assigned the 'query-users' admin role, thus can query any user to get their claims
claimsProvider->authServer:6. Get access_token\n(grant_type=client_credentials, role=query-users)
claimsProvider<-authServer:7. Return access_token

alt Prepare email_address - Bob was involved at step  3. a)
note over claimsProvider:Use Bob's email_address extracted from access_token from a request at step 5. a)
else Prepare email_address - Bob was not involved at step  3. b)
note over claimsProvider:Use Bob's email_address extracted from a request body at step 5. b)
end
authServer<-claimsProvider:8. Query Bob's user_claims\n(access_token, Bob's email_address)
authServer->claimsProvider:9. Return Bob's user_claims

smtpServer<-claimsProvider:10. Send plain_message from challenge@bar.com to bob@outlook.com\n(claims_provider_configuration_url, user_claims, ticket_challenge)
imapServer->claimsProvider:11. Retrieve dkim_signed_message sent from bob@outlook.com to response@bar.com\n(claims_provider_configuration_url, user_claims, ticket_challenge)
rqpClient<-claimsProvider:12. Return claims_token\n(Bob's dkim_signed_message)
rqpClient->asServer:13. Call token endpoint\n(ticket, pushed_claims=claims_token + metadata)
note over asServer:In addition to claims_token, pushed claims may also contain metadata such as:\n1. recipient_info (email address, fullname)\n2. file_info (filename, file size, file digest, mime type)
group Authorization process
note over asServer:1. extract dkim_signed _message from claims_token\n2. verify DKIM signature of dkim_signed _message\n3. extract 'From:' part of dkim_signed_message e.g. Bob Sanders <bob@outlook.com>\n4. extract claims_provider_configuration_url, user_claims and ticket_challenge from dkim_signed_message\n5. verify claims_token signature\n6. compare ticket_challenge vs. Base64URL-Encode(SHA256(ticket))\n7. evaluate user_claims\n8. evaluate other optional claims e.g. recipient_info, file_info
end
rqpClient<-asServer:14. Return RPT
rsServer<-rqpClient:15. Get data from Alice's 'Outgoing' resource\n(RPT)
rsServer->rqpClient:16. 200 OK