participant "Client" as client
participant "Resource Server (RS)" as RS
participant "Authorization Server (AS)" as AS

bottomparticipants

note right of client:Client:\n• is registered at the AS as a confidential client and has a client secret
note right of RS:RS:\n• is registered at the AS as a confidential client and has a client secret
client->AS:1. Authorization Grant
AS->AS:2. AS:\n• creates a bearer Access Token using high entropy nonce data string
client<-AS:3. Access Token
client->client:4. Client:\n a) computes the intermediary Route-MAC\n b) generates the intermadiary Route-MAC-JWT with a payload including a timestamp 
note right of client:The Route-MAC is computed as:\nRoute-MAC = HMAC-SHA256(Key, message)\nwhere\nKey = SHA256(client's client secret)\nmessage = Access Token
note right of client:The Route-MAC-JWT is generated as:\nRoute-MAC-JWT = header || "." || payload || "." || signature\nwhere\nheader = base64url({"typ":"JWT","alg":"HS256"})\npayload = base64url({"ts":timestamp})\nsignature = base64url(HMAC-SHA256(Key, message))\nwhere\nmessage = header || "." || payload\nKey = Route-MAC
client->RS:5. Access Token, "Route-MAC-JWT"
note right of client:Client sends the intermediary Route-MAC-JWT in the "Route-MAC-JWT" request header field
RS->RS:6. RS:\n a) computes the destination Route-MAC\n b) creates the destination Route-MAC-JWT by replacing the Route-MAC-JWT signature\n     with the base64url encoded Route-MAC value
note right of RS:The Route-MAC is computed as:\nRoute-MAC = HMAC-SHA256(Key, message)\nwhere\nKey = SHA256(RS's client secret)\nRoute-MAC-JWT = "Route-MAC-JWT" request header field value\nmessage = Route-MAC-JWT signature
RS->AS:7. Access Token, Route-MAC-JWT
note right of RS:RS sends the Access Token in the token field and the destination Route-MAC-JWT\nin the Authorization header to authenticate itself to the AS introspection endpoint
AS->AS:8. AS:\n a) looks up the Access Token data and checks the token state, if active\n b) computes the itermediary Itinerary-MAC\n c) generates the intermediary Itinerary-MAC-JWT with the payload from the Route-MAC-JWT\n d) computes the destination Itinerary-MAC\n e) creates the destination Itinerary-MAC-JWT by replacing the Itinerary-MAC-JWT signature\n     with the base64url encoded Itinerary-MAC value\n f)  compares the destination Itinerary-MAC-JWT signature with the Route-MAC-JWT signature, they are equal,\n     the Access Token route and the Route-MAC-JWT have been verified,\n     the AS validates the ts (timestamp) claim value from the Route-MAC-JWT, if valid,\n     the AS may return the Access Token introspection response
note right of AS:Itinerary-MAC and Itinerary-MAC-JWT are computed, generated and created in an analogous manner\nas Route-MAC and Route-MAC-JWT.
RS<-AS:9. Access Token introspection response
RS->RS:10. RS:\n• verifies the Access Token introspection response, if true,\n   the RS may return the protected resource
client<-RS:11. Protected Resource