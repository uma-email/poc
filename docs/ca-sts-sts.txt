participant "Security Token Service 1 (STS1)" as stsServer1
participant "RqP Client" as rqpClient
participant "Resource Server (RS)" as rsServer
participant "Security Token Service 2 (STS2)" as stsServer2
participant "OAuth2 Server (AS)" as authzServer

bottomparticipants

note over stsServer1:STS1 is part of OIDC Server:\n• publishes its metadata on a URL .well-known/openid-configuration
note over stsServer2:STS2 is part of OAuth2 Server
note over rqpClient:RqP Client:\n• a user is authenticated at OIDC Server, RqP Client has an access token\n• is registered at OAuth2 Server as a public or confidential client
note over rsServer:admin has set up the RS and registers it's 'RS API' resource\nat the OAuth2 Server
rqpClient->authzServer:1. Get ticket (ticket=access_token)\n    (grant_type=client_credentials, audience='RS API', scope='ticket')
rqpClient<-authzServer:2. Return ticket (ticket=access_token)
rqpClient->rqpClient:3. Create ticket challenge\n    ticket_challenge = Base64URL-Encode(SHA256(ticket))
stsServer1<-rqpClient:4. Token exchange request\n    (grant_type=token-exchange, resource="RS API", ticket_challenge,\n      subject_token=access_token,\n      subject_token_type=urn:ietf:params:oauth:token-type:access_token\n      requested_token_type=urn:ietf:params:oauth:token-type:jwt)
group Authorization assessment
note over stsServer1:1. evaluate the user_claims from access_token\n2. evaluate resource="RS API"
end
rqpClient<-stsServer1:5. Return claims_token (user_claims + ticket_challenge)

rqpClient->stsServer2:6. Token exchange request\n    (grant_type=token-exchange, resource="RS API", ticket,\n      subject_token=claims_token,\n      subject_token_type=urn:ietf:params:oauth:token-type:jwt\n      requested_token_type=urn:ietf:params:oauth:token-type:access_token)
group Authorization assessment
note over stsServer2:1. verify ticket\n2. extract user_claims from claims_token\n3. select email_address claim\n4. bootstrap discovery of OIDC Server config url from email address via WebFinger;\n    if this doesn't work, build well-known url using domain part of email_address\n5. verify claims_token signature\n6. evaluate resource="RS API"\n7. extract ticket_challenge claim from claims_token\n8. compare ticket_challenge vs. Base64URL-Encode(SHA256(ticket))\n9. evaluate user_claims
end
rqpClient<-stsServer2:7. Return access token\n    (AT)
rsServer<-rqpClient:8. Get data from 'RS API' resource\n    (AT)
rsServer->rqpClient:9. 200 OK