openapi: 3.0.1
info:
  title: AEMS REST API
  description: Authorization-Enhanced Mail System (AEMS)
  contact:
    url: 'https://github.com/1token'
  license:
    name: Apache License 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
  version: '0.3'
servers:
  - url: '${BASE_SERVER_API_URL}'
    variables: {}
paths:
  '/messages':
    get:
      tags:
        - messages
      summary: List all messages filtered by postalFolders, postalLabels and/or customLabels
      operationId: getAllMessages
      parameters:
        - name: postalFolders
          in: query
          description: 'EMPTY or [] or ["inbox","snoozed","sent","drafts"]'
          required: false
          schema:
            type: string
        - name: postalLabels
          in: query
          description: 'EMPTY or [] or ["done","archived","starred","important","chats","spam","trash","unread"]'
          required: false
          schema:
            type: string
        - name: customLabels
          in: query
          description: 'EMPTY or [] or ["Label 1","Label 2"]'
          required: false
          schema:
            type: string
        - name: searchQuery
          in: query
          description: 'EMPTY or SEARCH QUERY e.g. tags @> ''[{"name": "Invoice"}]'', read_message.search_subject @@ to_tsquery(''Hello & World'')'
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: 'EMPTY or NUMBER'
          required: false
          schema:
            type: integer
        - name: timelineId
          in: query
          description: 'EMPTY or NUMBER'
          required: false
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
    post:
      tags:
        - messages
      summary: Create a new draft message in 'Draft' folder
      operationId: createMessage
      parameters:
        - name: parentId
          in: query
          description: The parent message identifier for 'Reply' or 'Forward' draft
          required: false
          schema:
            type: string
        - name: fwd
          in: query
          description: The 'Forward' draft
          required: false
          schema:
            type: boolean
      requestBody:
        description: Message to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageInput'
      responses:
        '405':
          description: Invalid input
  '/messages/{id}':
    get:
      tags:
        - messages
      summary: Get the specified message filtered by postalFolders, postalLabels and/or customLabels
      operationId: getMessage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
      - KeycloakOAuthFlows:
        - repository
        - repository:admin          
    put:
      tags:
        - messages
      summary: Update the specified draft message
      operationId: updateMessage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Message to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageInput'
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - messages
      summary: Permanently delete the specified message
      operationId: deleteMessage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
  '/files':
    get:
      tags:
        - repository pool
      summary: List the metadata of all files
      operationId: getMetadataOfAllFiles
      responses:
        '405':
          description: Invalid input
    post:
      tags:
        - repository pool
      summary: Upload a file(s)
      operationId: uploadFile
      requestBody:
        $ref: '#/components/requestBodies/Attachment'
      responses:
        '200':
          description: File(s) uploaded
        '403':
          description: Bad or missing API key
        '404':
          description: File storage error
  '/files/{id}':
    get:
      tags:
        - repository pool
      summary: Get the metadata of specified file
      operationId: getMetadataOfFile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - repository pool
      summary: Delete the specified file
      operationId: deleteFile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
  '/files/{id}/download':
    get:
      tags:
        - repository pool
      summary: Download the specified file
      operationId: downloadFile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
  '/messages/{message_id}/attachments':
    get:
      tags:
        - attachments
      summary: List the metadata of all attachments of specified message
      operationId: getMetadataOfAllAttachments
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
  '/messages/{message_id}/attachments/{id}':
    post:
      tags:
        - attachments
      summary: Upload a file as a new version of specified attachment (not implemented)
      operationId: uploadNewVersionAttachment
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/File'
      responses:
        '200':
          description: Attachment uploaded
        '403':
          description: Bad or missing API key
        '404':
          description: Attachment storage error
    get:
      tags:
        - attachments
      summary: Get the metadata of specified attachment
      operationId: getMetadataOfAttachment
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - attachments
      summary: Remove the last version of specified attachment (not implemented)
      operationId: removeLastVersionAttachment
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
  '/messages/{message_id}/attachments/{id}/download':
    get:
     tags:
       - attachments
     summary: Download the last version of specified attachment
     operationId: downloadAttachment
     parameters:
       - name: message_id
         in: path
         required: true
         schema:
           type: string
       - name: id
         in: path
         required: true
         schema:
           type: string
     responses:
       '405':
         description: Invalid input
  '/messages/send':
    post:
      tags:
        - messages / send
      summary: Create a new message and send it
      operationId: createAndSendMessage
      parameters:
        - name: parentId
          in: query
          description: The parent message identifier for 'Reply' or 'Forward' draft
          required: false
          schema:
            type: string
        - name: fwd
          in: query
          description: The 'Forward' draft
          required: false
          schema:
            type: boolean
      requestBody:
        description: Message to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageInput'
      responses:
        '405':
          description: Invalid input
  '/messages/{id}/send':
    put:
      tags:
        - messages / send
      summary: Update the specified draft message and send it
      operationId: updateAndSendMessage
      parameters:
        - name: id
          in: path
          description: The message identifier
          required: true
          schema:
            type: string
      requestBody:
        description: Message to update and send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageInput'
      responses:
        '405':
          description: Invalid input
  '/messages/labels':
    post:
      tags:
        - messages / labels
      summary: Modifies the labels on the specified list of messages
      operationId: modifyMessagesLabels
      requestBody:
        description: Labels on list of messages to modify
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagesLabels'
      responses:
        '405':
          description: Invalid input
  '/messages/{id}/labels':
    put:
      tags:
        - messages / labels
      summary: Modifies the labels on the specified message
      operationId: modifyMessageLabels
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Message labels to modify
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageLabels'
      responses:
        '405':
          description: Invalid input
components:
  schemas:
    MessageInput:
      properties:
        envelopes:
          $ref: '#/components/schemas/MessageEnvelopesToCcBcc'
        subject:
          type: string
        body:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/MessageAttachmentsInput'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/MessageTagsInput'
    MessageEnvelopesToCcBcc:
      type: object
      properties:
        to:
          type: array
          items:
            $ref: '#/components/schemas/MessageEnvelopesInput'
        cc:
          type: array
          items:
            $ref: '#/components/schemas/MessageEnvelopesInput'
        bcc:
          type: array
          items:
            $ref: '#/components/schemas/MessageEnvelopesInput'
    Message:
      allOf:
        - $ref: '#/components/schemas/NewMessage'
        - required:
            - id
          properties:
            id:
              type: string
              format: uuidv4
    UpdateMessage:
      allOf:
        - $ref: '#/components/schemas/NewMessage'
        - required:
            - id
          properties:
            id:
              type: string
              format: uuidv4
    NewMessage:
      properties:
        sender:
          type: object
          properties:
            email_address:
              type: string
            display_name:
              type: string
        sent_at:
          type: string
        envelopes:
          type: array
          items:
            $ref: '#/components/schemas/MessageEnvelopes'
        subject:
          type: string
        body:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/MessageAttachmentsInput'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/MessageTagsInput'
    MessageEnvelopes:
      type: object
      properties:
        email_address:
          type: string
        display_name:
          type: string
        received_at:
          type: string
        snoozed_at:
          type: string
    MessageAttachments:
      type: array
      items:
        $ref: '#/components/schemas/MessageAttachmentsInput'
    MessageTags:
      type: array
      items:
        $ref: '#/components/schemas/MessageTagsInput'
    MessagesLabels:
      type: object
      properties:
        message_ids:
          type: array
          items:
            $ref: '#/components/schemas/MessageIds'
        postal_labels:
          $ref: '#/components/schemas/PostalLabels'
        custom_label_ids:
          type: array
          items:
            $ref: '#/components/schemas/CustomLabels'
    MessageIds:
      type: integer
    MessageLabels:
      type: object
      properties:
        postal_labels:
          $ref: '#/components/schemas/PostalLabels'
        custom_label_ids:
          type: array
          items:
            $ref: '#/components/schemas/CustomLabels'
    PostalLabels:
      type: object
      properties:
        done:
          type: boolean
          default: false
        archived:
          type: boolean
          default: false
        starred:
          type: boolean
          default: false
        important:
          type: boolean
          default: false
        chats:
          type: boolean
          default: false
        spam:
          type: boolean
          default: false
        unread:
          type: boolean
          default: false
        trash:
          type: boolean
          default: false
    CustomLabels:
      type: integer
    MessageEnvelopesInput:
      type: object
      properties:
        email_address:
          type: string
        display_name:
          type: string
    MessageAttachmentsInput:
      type: object
      properties:
        id:
          type: string
    MessageTagsInput:
      type: object
      properties:
        type:
          type: integer
        name:
          type: string
        value:
          type: string
    AttachmentMetadata:
      allOf:
        - required:
            - id
          properties:
            id:
              type: string
              format: uuidv4
            filename:
              type: string
            originalname:
              type: string
            mimetype:
              type: string
    FileBody:
      # https://github.com/swagger-api/swagger-ui/issues/4600
      # type: array
      # items:
      #   type: string
      #   format: binary
      type: string
      format: binary
    AttachmentBody:
      # https://github.com/swagger-api/swagger-ui/issues/4600
      # type: array
      # items:
      #   type: string
      #   format: binary
      type: string
      format: binary
  requestBodies:
    File:
      description: multipart/form-data containing file(s) parts
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                $ref: '#/components/schemas/FileBody'
    Attachment:
      description: multipart/form-data containing attachment(s) parts
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              attachment:
                $ref: '#/components/schemas/AttachmentBody'
  securitySchemes:
    KeycloakOAuthFlows:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: ${AUTH_SERVER_AUTH_URL}${AUTH_REALM_PATH}${AUTH_LOGIN_PATH}
          tokenUrl: ${AUTH_SERVER_AUTH_URL}${AUTH_REALM_PATH}${AUTH_TOKEN_PATH}
          scopes:
            repository:admin: Administer your repositories
            repository: Read your repositories
            repository:delete: Delete your repositories
            repository:write: Read and modify your repositories
        clientCredentials:
          tokenUrl: https://bitbucket.org/site/oauth2/access_token
        implicit:
          authorizationUrl: https://bitbucket.org/site/oauth2/authorize?audience=abcd
          scopes:        
            repository:admin: Administer your repositories
            repository: Read your repositories
            repository:delete: Delete your repositories
            repository:write: Read and modify your repositories
        password:
          tokenUrl: https://bitbucket.org/site/oauth2/access_token
          scopes:        
            repository:admin: Administer your repositories
            repository: Read your repositories
            repository:delete: Delete your repositories
            repository:write: Read and modify your repositories     