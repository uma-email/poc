{
  "id": "dev",
  "realm": "dev",
  "notBefore": 0,
  "revokeRefreshToken": false,
  "refreshTokenMaxReuse": 0,
  "accessTokenLifespan": 300,
  "accessTokenLifespanForImplicitFlow": 900,
  "ssoSessionIdleTimeout": 1800,
  "ssoSessionMaxLifespan": 36000,
  "ssoSessionIdleTimeoutRememberMe": 0,
  "ssoSessionMaxLifespanRememberMe": 0,
  "offlineSessionIdleTimeout": 2592000,
  "offlineSessionMaxLifespanEnabled": false,
  "offlineSessionMaxLifespan": 5184000,
  "clientSessionIdleTimeout": 0,
  "clientSessionMaxLifespan": 0,
  "clientOfflineSessionIdleTimeout": 0,
  "clientOfflineSessionMaxLifespan": 0,
  "accessCodeLifespan": 60,
  "accessCodeLifespanUserAction": 300,
  "accessCodeLifespanLogin": 1800,
  "actionTokenGeneratedByAdminLifespan": 43200,
  "actionTokenGeneratedByUserLifespan": 300,
  "enabled": true,
  "sslRequired": "external",
  "registrationAllowed": true,
  "registrationEmailAsUsername": true,
  "rememberMe": false,
  "verifyEmail": true,
  "loginWithEmailAllowed": true,
  "duplicateEmailsAllowed": false,
  "resetPasswordAllowed": true,
  "editUsernameAllowed": false,
  "bruteForceProtected": false,
  "permanentLockout": false,
  "maxFailureWaitSeconds": 900,
  "minimumQuickLoginWaitSeconds": 60,
  "waitIncrementSeconds": 60,
  "quickLoginCheckMilliSeconds": 1000,
  "maxDeltaTimeSeconds": 43200,
  "failureFactor": 30,
  "roles": {
    "realm": [
      {
        "id": "fb3adf01-1e36-49c1-ae68-defcdc813ace",
        "name": "offline_access",
        "description": "${role_offline-access}",
        "composite": false,
        "clientRole": false,
        "containerId": "dev",
        "attributes": {}
      },
      {
        "id": "24069453-f3b0-464b-884d-44e6ac1c6037",
        "name": "rp_agent",
        "composite": false,
        "clientRole": false,
        "containerId": "dev",
        "attributes": {}
      },
      {
        "id": "21b7dc91-32d5-4e88-bde0-dd6a480b0c9a",
        "name": "user",
        "composite": false,
        "clientRole": false,
        "containerId": "dev",
        "attributes": {}
      },
      {
        "id": "c4ac263b-2090-40a8-8f94-e941d2cf7d86",
        "name": "uma_authorization",
        "description": "${role_uma_authorization}",
        "composite": false,
        "clientRole": false,
        "containerId": "dev",
        "attributes": {}
      }
    ],
    "client": {
      "realm-management": [
        {
          "id": "04f1bb57-db2e-41c8-9654-e01c0ca32d65",
          "name": "view-authorization",
          "description": "${role_view-authorization}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "c9bcd74f-8471-4401-8f02-9780fa6db424",
          "name": "view-users",
          "description": "${role_view-users}",
          "composite": true,
          "composites": {
            "client": {
              "realm-management": [
                "query-groups",
                "query-users"
              ]
            }
          },
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "354d03da-027d-4887-9cb9-db0c7414a728",
          "name": "view-clients",
          "description": "${role_view-clients}",
          "composite": true,
          "composites": {
            "client": {
              "realm-management": [
                "query-clients"
              ]
            }
          },
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "1169075b-8987-4cfc-97bc-179b9df2cdf9",
          "name": "manage-realm",
          "description": "${role_manage-realm}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "f00f3907-ac7c-4bbf-87ef-8fa23999432b",
          "name": "manage-clients",
          "description": "${role_manage-clients}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "da4c3cc2-bfbb-4eac-9479-bce7d26169f1",
          "name": "create-client",
          "description": "${role_create-client}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "8df4151c-59dd-4f85-88d4-7ce28d11b306",
          "name": "query-realms",
          "description": "${role_query-realms}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "0cfc91ab-ac1a-4d8e-818b-88c9773353b1",
          "name": "query-groups",
          "description": "${role_query-groups}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "4434fdf3-145c-4f08-b91d-6ea1f6b5bb40",
          "name": "manage-authorization",
          "description": "${role_manage-authorization}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "43f8c101-c69f-47f2-a447-d9d700ae03f2",
          "name": "view-identity-providers",
          "description": "${role_view-identity-providers}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "2881560a-c7d3-4c0e-85ac-e7ea28c174c0",
          "name": "view-events",
          "description": "${role_view-events}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "75031d89-f7a5-4441-bfc3-da843a2b4b66",
          "name": "manage-users",
          "description": "${role_manage-users}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "26f00384-4948-42d3-9798-7ec40c15a0a6",
          "name": "query-clients",
          "description": "${role_query-clients}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "f080d2c0-6532-4cca-9729-f2f668e5319c",
          "name": "manage-events",
          "description": "${role_manage-events}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "d172cc9a-aa0a-48e1-a1eb-e47cdc8deb2b",
          "name": "realm-admin",
          "description": "${role_realm-admin}",
          "composite": true,
          "composites": {
            "client": {
              "realm-management": [
                "view-users",
                "view-authorization",
                "view-clients",
                "manage-realm",
                "manage-clients",
                "create-client",
                "query-realms",
                "query-groups",
                "manage-authorization",
                "view-identity-providers",
                "view-events",
                "manage-users",
                "query-clients",
                "manage-events",
                "view-realm",
                "impersonation",
                "manage-identity-providers",
                "query-users"
              ]
            }
          },
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "6a4817fa-8144-4ddc-b5e5-c1f8bcc39dc6",
          "name": "view-realm",
          "description": "${role_view-realm}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "4df4aa5e-e97d-40e1-94e4-b321c0341f02",
          "name": "impersonation",
          "description": "${role_impersonation}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "b003f300-c01c-487c-a1d5-e120e3034808",
          "name": "manage-identity-providers",
          "description": "${role_manage-identity-providers}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        },
        {
          "id": "25a8932d-0f56-45f5-8db3-0c0d680ae641",
          "name": "query-users",
          "description": "${role_query-users}",
          "composite": false,
          "clientRole": true,
          "containerId": "7493442f-d793-4731-907f-9ece4d885a5d",
          "attributes": {}
        }
      ],
      "security-admin-console": [],
      "umabox-client": [],
      "umabox-rs-service": [
        {
          "id": "c513ed02-c65a-4efb-bcfd-a98c4a770417",
          "name": "uma_protection",
          "composite": false,
          "clientRole": true,
          "containerId": "51e54aa1-31b3-47c4-88d8-4fd22bb86bdd",
          "attributes": {}
        }
      ],
      "aaa9508a-6cfd-4f57-987c-cc63bfe86040": [
        {
          "id": "391aa395-ed1a-48b9-8f30-a1e73da7ca00",
          "name": "uma_protection",
          "composite": false,
          "clientRole": true,
          "containerId": "aaa9508a-6cfd-4f57-987c-cc63bfe86040",
          "attributes": {}
        }
      ],
      "admin-cli": [],
      "umabox-cp": [],
      "account-console": [],
      "broker": [
        {
          "id": "7fdf566c-2097-4e9d-904c-16612ab19581",
          "name": "read-token",
          "description": "${role_read-token}",
          "composite": false,
          "clientRole": true,
          "containerId": "406a44a2-ee59-4474-b043-f7f79555f9e9",
          "attributes": {}
        }
      ],
      "umabox-rp-agent": [
        {
          "id": "7423efe5-d3d8-4458-9abe-df8ad8e8e6b9",
          "name": "uma_protection",
          "composite": false,
          "clientRole": true,
          "containerId": "0f59d68e-a517-41d3-97fe-9056e9f3a4eb",
          "attributes": {}
        }
      ],
      "umabox-rs": [],
      "account": [
        {
          "id": "2f27a8f1-1432-4010-9193-98276e1bdba7",
          "name": "manage-account-links",
          "description": "${role_manage-account-links}",
          "composite": false,
          "clientRole": true,
          "containerId": "27d46a2d-733c-49aa-abbb-7d1c1e649673",
          "attributes": {}
        },
        {
          "id": "ea16cd06-1875-4568-8729-f35efee702ae",
          "name": "view-profile",
          "description": "${role_view-profile}",
          "composite": false,
          "clientRole": true,
          "containerId": "27d46a2d-733c-49aa-abbb-7d1c1e649673",
          "attributes": {}
        },
        {
          "id": "10d213b5-b9e5-470e-b6bf-5d2aedb2db0b",
          "name": "manage-consent",
          "description": "${role_manage-consent}",
          "composite": true,
          "composites": {
            "client": {
              "account": [
                "view-consent"
              ]
            }
          },
          "clientRole": true,
          "containerId": "27d46a2d-733c-49aa-abbb-7d1c1e649673",
          "attributes": {}
        },
        {
          "id": "1d088770-9d94-43cf-8ed9-9e9bd9dd57af",
          "name": "view-applications",
          "description": "${role_view-applications}",
          "composite": false,
          "clientRole": true,
          "containerId": "27d46a2d-733c-49aa-abbb-7d1c1e649673",
          "attributes": {}
        },
        {
          "id": "bdc6eb74-9297-491f-a715-ac21501a50d7",
          "name": "delete-account",
          "description": "${role_delete-account}",
          "composite": false,
          "clientRole": true,
          "containerId": "27d46a2d-733c-49aa-abbb-7d1c1e649673",
          "attributes": {}
        },
        {
          "id": "2b370830-8384-4732-aaa7-5877211902d8",
          "name": "manage-account",
          "description": "${role_manage-account}",
          "composite": true,
          "composites": {
            "client": {
              "account": [
                "manage-account-links"
              ]
            }
          },
          "clientRole": true,
          "containerId": "27d46a2d-733c-49aa-abbb-7d1c1e649673",
          "attributes": {}
        },
        {
          "id": "d3fbebf1-f54d-4b96-bc2c-023dd5c4325a",
          "name": "view-consent",
          "description": "${role_view-consent}",
          "composite": false,
          "clientRole": true,
          "containerId": "27d46a2d-733c-49aa-abbb-7d1c1e649673",
          "attributes": {}
        }
      ]
    }
  },
  "groups": [],
  "defaultRoles": [
    "offline_access",
    "user",
    "uma_authorization"
  ],
  "requiredCredentials": [
    "password"
  ],
  "otpPolicyType": "totp",
  "otpPolicyAlgorithm": "HmacSHA1",
  "otpPolicyInitialCounter": 0,
  "otpPolicyDigits": 6,
  "otpPolicyLookAheadWindow": 1,
  "otpPolicyPeriod": 30,
  "otpSupportedApplications": [
    "FreeOTP",
    "Google Authenticator"
  ],
  "webAuthnPolicyRpEntityName": "keycloak",
  "webAuthnPolicySignatureAlgorithms": [
    "ES256"
  ],
  "webAuthnPolicyRpId": "",
  "webAuthnPolicyAttestationConveyancePreference": "not specified",
  "webAuthnPolicyAuthenticatorAttachment": "not specified",
  "webAuthnPolicyRequireResidentKey": "not specified",
  "webAuthnPolicyUserVerificationRequirement": "not specified",
  "webAuthnPolicyCreateTimeout": 0,
  "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
  "webAuthnPolicyAcceptableAaguids": [],
  "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
  "webAuthnPolicyPasswordlessSignatureAlgorithms": [
    "ES256"
  ],
  "webAuthnPolicyPasswordlessRpId": "",
  "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
  "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
  "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
  "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
  "webAuthnPolicyPasswordlessCreateTimeout": 0,
  "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
  "webAuthnPolicyPasswordlessAcceptableAaguids": [],
  "users": [
    {
      "id": "3ef534f6-3d43-4c85-8c94-1bff72a0aaf6",
      "createdTimestamp": 1620025745530,
      "username": "service-account-aaa9508a-6cfd-4f57-987c-cc63bfe86040",
      "enabled": true,
      "totp": false,
      "emailVerified": false,
      "serviceAccountClientId": "aaa9508a-6cfd-4f57-987c-cc63bfe86040",
      "disableableCredentialTypes": [],
      "requiredActions": [],
      "realmRoles": [
        "offline_access",
        "user",
        "rp_agent",
        "uma_authorization"
      ],
      "clientRoles": {
        "aaa9508a-6cfd-4f57-987c-cc63bfe86040": [
          "uma_protection"
        ],
        "account": [
          "view-profile",
          "manage-account"
        ]
      },
      "notBefore": 0,
      "groups": []
    },
    {
      "id": "eb899a90-c17d-477c-ba31-456a45ef19eb",
      "createdTimestamp": 1619427746633,
      "username": "service-account-umabox-rp-agent",
      "enabled": true,
      "totp": false,
      "emailVerified": false,
      "serviceAccountClientId": "umabox-rp-agent",
      "disableableCredentialTypes": [],
      "requiredActions": [],
      "realmRoles": [
        "offline_access",
        "rp_agent",
        "uma_authorization"
      ],
      "clientRoles": {
        "umabox-rp-agent": [
          "uma_protection"
        ],
        "account": [
          "view-profile",
          "manage-account"
        ]
      },
      "notBefore": 0,
      "groups": []
    },
    {
      "id": "ac48400b-79c6-4a2e-9b89-ff224756a7c4",
      "createdTimestamp": 1619427528440,
      "username": "service-account-umabox-rs-service",
      "enabled": true,
      "totp": false,
      "emailVerified": false,
      "serviceAccountClientId": "umabox-rs-service",
      "disableableCredentialTypes": [],
      "requiredActions": [],
      "realmRoles": [
        "offline_access",
        "uma_authorization"
      ],
      "clientRoles": {
        "umabox-rs-service": [
          "uma_protection"
        ],
        "account": [
          "view-profile",
          "manage-account"
        ]
      },
      "notBefore": 0,
      "groups": []
    }
  ],
  "scopeMappings": [
    {
      "client": "aaa9508a-6cfd-4f57-987c-cc63bfe86040",
      "roles": [
        "rp_agent"
      ]
    },
    {
      "client": "umabox-rp-agent",
      "roles": [
        "rp_agent"
      ]
    },
    {
      "clientScope": "offline_access",
      "roles": [
        "offline_access"
      ]
    }
  ],
  "clientScopeMappings": {
    "account": [
      {
        "client": "account-console",
        "roles": [
          "manage-account"
        ]
      }
    ]
  },
  "clients": [
    {
      "id": "aaa9508a-6cfd-4f57-987c-cc63bfe86040",
      "clientId": "aaa9508a-6cfd-4f57-987c-cc63bfe86040",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [],
      "webOrigins": [],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": true,
      "standardFlowEnabled": false,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": true,
      "authorizationServicesEnabled": true,
      "publicClient": false,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": -1,
      "protocolMappers": [
        {
          "id": "90195b71-acb9-4e43-b01f-2ffa9d85eaaa",
          "name": "Client ID",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "clientId",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "clientId",
            "jsonType.label": "String"
          }
        },
        {
          "id": "593377f3-7b58-4c8e-9636-6f5bcca566b8",
          "name": "Client Host",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "clientHost",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "clientHost",
            "jsonType.label": "String"
          }
        },
        {
          "id": "2d04bf8a-1185-408e-8166-88b8a8c9895e",
          "name": "Client IP Address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "clientAddress",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "clientAddress",
            "jsonType.label": "String"
          }
        }
      ],
      "defaultClientScopes": [
        "web-origins",
        "role_list",
        "profile",
        "roles",
        "aems-client-scope",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ],
      "authorizationSettings": {
        "allowRemoteResourceManagement": true,
        "policyEnforcementMode": "ENFORCING",
        "resources": [],
        "policies": [],
        "scopes": [],
        "decisionStrategy": "UNANIMOUS"
      }
    },
    {
      "id": "27d46a2d-733c-49aa-abbb-7d1c1e649673",
      "clientId": "account",
      "name": "${client_account}",
      "rootUrl": "${authBaseUrl}",
      "baseUrl": "/realms/dev/account/",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "defaultRoles": [
        "view-profile",
        "manage-account"
      ],
      "redirectUris": [
        "/realms/dev/account/*"
      ],
      "webOrigins": [],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "publicClient": false,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": 0,
      "defaultClientScopes": [
        "web-origins",
        "role_list",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "id": "7dd0e060-65fa-4227-8d14-10ec02da8da9",
      "clientId": "account-console",
      "name": "${client_account-console}",
      "rootUrl": "${authBaseUrl}",
      "baseUrl": "/realms/dev/account/",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [
        "/realms/dev/account/*"
      ],
      "webOrigins": [],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "publicClient": true,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {
        "pkce.code.challenge.method": "S256"
      },
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": 0,
      "protocolMappers": [
        {
          "id": "e39fad79-8869-49cb-8905-f92156eeca49",
          "name": "audience resolve",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-audience-resolve-mapper",
          "consentRequired": false,
          "config": {}
        }
      ],
      "defaultClientScopes": [
        "web-origins",
        "role_list",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "id": "a82baca8-f8d7-4188-b3c7-f434b1ce5503",
      "clientId": "admin-cli",
      "name": "${client_admin-cli}",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [],
      "webOrigins": [],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": false,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": true,
      "serviceAccountsEnabled": false,
      "publicClient": true,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": 0,
      "defaultClientScopes": [
        "web-origins",
        "role_list",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "id": "406a44a2-ee59-4474-b043-f7f79555f9e9",
      "clientId": "broker",
      "name": "${client_broker}",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [],
      "webOrigins": [],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "publicClient": false,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": 0,
      "defaultClientScopes": [
        "web-origins",
        "role_list",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "id": "7493442f-d793-4731-907f-9ece4d885a5d",
      "clientId": "realm-management",
      "name": "${client_realm-management}",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [],
      "webOrigins": [],
      "notBefore": 0,
      "bearerOnly": true,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "publicClient": false,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": 0,
      "defaultClientScopes": [
        "web-origins",
        "role_list",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "id": "a7bc96ab-476e-4adb-9322-d582f65510ce",
      "clientId": "security-admin-console",
      "name": "${client_security-admin-console}",
      "rootUrl": "${authAdminUrl}",
      "baseUrl": "/admin/dev/console/",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [
        "/admin/dev/console/*"
      ],
      "webOrigins": [
        "+"
      ],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "publicClient": true,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {
        "pkce.code.challenge.method": "S256"
      },
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": 0,
      "protocolMappers": [
        {
          "id": "0faa5a5c-ecb5-4a55-8a74-a9adf98269c3",
          "name": "locale",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "locale",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "locale",
            "jsonType.label": "String"
          }
        }
      ],
      "defaultClientScopes": [
        "web-origins",
        "role_list",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "id": "e0737c6b-0115-4e75-a46d-46f9f9e210c9",
      "clientId": "umabox-client",
      "name": "Web Application",
      "rootUrl": "http://acme:7000/",
      "adminUrl": "http://acme:7000/",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [
        "http://acme:3000/*",
        "http://acme:7000/*"
      ],
      "webOrigins": [
        "http://acme:7000",
        "http://acme:3000"
      ],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "publicClient": true,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {
        "saml.assertion.signature": "false",
        "saml.multivalued.roles": "false",
        "saml.force.post.binding": "false",
        "saml.encrypt": "false",
        "backchannel.logout.revoke.offline.tokens": "false",
        "saml.server.signature": "false",
        "saml.server.signature.keyinfo.ext": "false",
        "exclude.session.state.from.auth.response": "false",
        "backchannel.logout.session.required": "true",
        "client_credentials.use_refresh_token": "false",
        "saml_force_name_id_format": "false",
        "saml.client.signature": "false",
        "tls.client.certificate.bound.access.tokens": "false",
        "saml.authnstatement": "false",
        "display.on.consent.screen": "false",
        "saml.onetimeuse.condition": "false"
      },
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": true,
      "nodeReRegistrationTimeout": -1,
      "defaultClientScopes": [
        "web-origins",
        "role_list",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "id": "1690e963-2b8e-417e-b9bd-2af7fa1e1302",
      "clientId": "umabox-cp",
      "name": "Claims Provider",
      "rootUrl": "http://localhost:6000/",
      "adminUrl": "http://acme:6000/",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [
        "http://localhost:6000/*"
      ],
      "webOrigins": [
        "http://localhost:6000"
      ],
      "notBefore": 0,
      "bearerOnly": true,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": true,
      "serviceAccountsEnabled": false,
      "publicClient": false,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {
        "saml.assertion.signature": "false",
        "saml.multivalued.roles": "false",
        "saml.force.post.binding": "false",
        "saml.encrypt": "false",
        "saml.server.signature": "false",
        "backchannel.logout.revoke.offline.tokens": "false",
        "saml.server.signature.keyinfo.ext": "false",
        "exclude.session.state.from.auth.response": "false",
        "backchannel.logout.session.required": "true",
        "client_credentials.use_refresh_token": "false",
        "saml_force_name_id_format": "false",
        "saml.client.signature": "false",
        "tls.client.certificate.bound.access.tokens": "false",
        "saml.authnstatement": "false",
        "display.on.consent.screen": "false",
        "saml.onetimeuse.condition": "false"
      },
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": true,
      "nodeReRegistrationTimeout": -1,
      "defaultClientScopes": [
        "web-origins",
        "role_list",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "id": "0f59d68e-a517-41d3-97fe-9056e9f3a4eb",
      "clientId": "umabox-rp-agent",
      "name": "Requesting Party Agent",
      "rootUrl": "http://acme:5000/",
      "adminUrl": "http://acme:5000/",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [
        "http://localhost:5000/*"
      ],
      "webOrigins": [
        "http://localhost:5000"
      ],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": false,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": true,
      "authorizationServicesEnabled": true,
      "publicClient": false,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {
        "saml.assertion.signature": "false",
        "saml.multivalued.roles": "false",
        "saml.force.post.binding": "false",
        "saml.encrypt": "false",
        "backchannel.logout.revoke.offline.tokens": "false",
        "saml.server.signature": "false",
        "saml.server.signature.keyinfo.ext": "false",
        "exclude.session.state.from.auth.response": "false",
        "backchannel.logout.session.required": "true",
        "client_credentials.use_refresh_token": "false",
        "saml_force_name_id_format": "false",
        "saml.client.signature": "false",
        "tls.client.certificate.bound.access.tokens": "false",
        "saml.authnstatement": "false",
        "display.on.consent.screen": "false",
        "saml.onetimeuse.condition": "false"
      },
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": false,
      "nodeReRegistrationTimeout": -1,
      "protocolMappers": [
        {
          "id": "2574e558-cc6b-4826-aefc-8291af10f225",
          "name": "Client IP Address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "clientAddress",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "clientAddress",
            "jsonType.label": "String"
          }
        },
        {
          "id": "0b6116a1-6606-4d72-8b8f-b5743411a097",
          "name": "AEMS",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-script-based-protocol-mapper",
          "consentRequired": false,
          "config": {
            "id.token.claim": "false",
            "access.token.claim": "true",
            "script": "/**\n * Available variables: \n * user - the current user\n * realm - the current realm\n * token - the current token\n * userSession - the current userSession\n * keycloakSession - the current keycloakSession\n */\n\nvar HttpRequest = Java.type('org.jboss.resteasy.spi.HttpRequest');\nvar JsonWebToken = Java.type('org.keycloak.representations.JsonWebToken');\nvar JsonSerialization = Java.type('org.keycloak.util.JsonSerialization');\nvar TokenVerifier = Java.type('org.keycloak.TokenVerifier');\nvar VerifierContext = Java.type('org.keycloak.crypto.AsymmetricSignatureVerifierContext');\nvar Base64 = Java.type('java.util.Base64');\nvar JSONWebKeySet = Java.type('org.keycloak.jose.jwk.JSONWebKeySet');\nvar JsonSerialization = Java.type('org.keycloak.util.JsonSerialization');\nvar JWSInput = Java.type('org.keycloak.jose.jws.JWSInput');\nvar PublicKey = Java.type('java.security.PublicKey');\nvar JWKParser = Java.type('org.keycloak.jose.jwk.JWKParser');\nvar RSAProvider = Java.type('org.keycloak.jose.jws.crypto.RSAProvider');\n\nvar IDToken = Java.type('org.keycloak.representations.IDToken');\nvar JavaString = Java.type('java.lang.String');\n\nfunction httpGet(theUrl) {\n    var con = new java.net.URL(theUrl).openConnection();\n    con.requestMethod = \"GET\";\n    return asResponse(con);\n}\n\nfunction asResponse(con) {\n    var d = read(con.inputStream);\n    return { data: d, statusCode: con.responseCode };\n}\n\nfunction read(inputStream) {\n    var inReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));\n    var inputLine;\n    var response = new java.lang.StringBuffer();\n\n    while ((inputLine = inReader.readLine()) !== null) {\n        response.append(inputLine);\n    }\n    inReader.close();\n    return response.toString();\n}\n\nvar verifyToken = function verifyToken(token) {\n    var verifier = TokenVerifier.create(token, IDToken.class);\n    var jsonWebToken = verifier.getToken();\n    if (!jsonWebToken.isActive()) {\n        return false;\n    }\n    var kid = verifier.getHeader().getKeyId();\n    var algorithm = verifier.getHeader().getAlgorithm().name();\n    var iss = verifier.getToken().getIssuer();\n    // print('iss: '  + iss);\n    try {\n        var response = httpGet(iss).data;\n    } catch (e) {\n        return false;\n    }\n    // print('response: ' + response);\n    var jsonWebKeySet = JsonSerialization.readValue(response, JSONWebKeySet.class);\n    var jws = new JWSInput(token);\n    var k = jsonWebKeySet.getKeys();\n    var publicKey = JWKParser.create(k[0]).toPublicKey()\n    var okay = RSAProvider.verify(jws, publicKey);\n    if (okay) {\n        return verifier.getToken();\n    } else {\n        return false;\n    }\n}\n\nvar httpRequest = keycloakSession.getContext().getContextObject(HttpRequest.class);\n// print('httpRequest: ' + httpRequest.getDecodedFormParameters());\nvar jwtTicket = httpRequest.getDecodedFormParameters().getFirst(\"ticket\");\nvar pushedClaims = httpRequest.getDecodedFormParameters().getFirst(\"claim_token\"); // claim_token in Keycloak should be named as a pushed_claims\n\nvar parseClaims = function parseClaims(claims) {\n    var base64Str = claims.replace(/-/g, '+').replace(/_/g, '/');\n    var decoded = Base64.getDecoder().decode(claims);\n    return JSON.parse(new JavaString(decoded));\n}\n\nvar parseJwtToken = function parseJwtToken(token) {\n    var claims = token.split('.')[1];\n    return parseClaims(claims);\n}\n\nif (jwtTicket && pushedClaims) {\n    var ticket = parseJwtToken(jwtTicket);\n    var ticketVerifier = String(ticket.claims['ticket_verifier']);\n    // print('TicketVerifier: '  + ticketVerifier);\n    token.setOtherClaims(\"ticket_verifier\", ticketVerifier);\n\n    var pushedClaimsObj = parseClaims(pushedClaims);\n    var claimsToken = String(pushedClaimsObj['claims_token']);\n    // print('ClaimsToken: ' + claimsToken);\n    var verifiedToken = verifyToken(claimsToken);\n    var claims = verifiedToken.getOtherClaims();\n    if (claims) {\n        var ticketChallenge = claims.get('ticket_challenge');\n        var emailAddress = claims.get('email_address');\n        var domain = emailAddress.split('@')[1];\n        var issuer = verifiedToken.getIssuer();\n        var wellKnownUri = 'https://' + domain + '/.well-known/claims-configuration';\n\n        // print('well-known: ' + wellKnownUri);\n        // print('domain: ' + domain);\n        // print('Issuer: ' + issuer);\n        // print('ticket_challenge: ' + ticketChallenge);\n        // print('email_address: ' + emailAddress);\n\n        var wellKnown;\n        var wellKnownJwksUri;\n        try {\n            wellKnown = httpGet(wellKnownUri).data;\n        } catch (e) {\n            wellKnown = false;\n        }\n\n        if (wellKnown) {\n            print('wellKnown: ' + wellKnown);\n            var wellKnownObj = JSON.parse(new JavaString(wellKnown));\n            var jwksUri = wellKnownObj['jwks_uri'];\n            token.setOtherClaims(\"jwks_uri\", jwksUri);\n        }\n\n        token.setOtherClaims(\"ticket_challenge\", ticketChallenge);\n        token.setOtherClaims(\"email_address\", emailAddress);\n        token.setOtherClaims(\"issuer\", issuer);\n        token.setOtherClaims(\"domain\", domain);\n    }\n}",
            "userinfo.token.claim": "false"
          }
        },
        {
          "id": "5c852240-5c6a-4729-afbe-1006fd82e2fd",
          "name": "Client ID",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "clientId",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "clientId",
            "jsonType.label": "String"
          }
        },
        {
          "id": "1a75ac3c-d9ae-4650-8219-1efbda1d898c",
          "name": "Client Host",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "clientHost",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "clientHost",
            "jsonType.label": "String"
          }
        }
      ],
      "defaultClientScopes": [
        "web-origins",
        "role_list",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ],
      "authorizationSettings": {
        "allowRemoteResourceManagement": true,
        "policyEnforcementMode": "ENFORCING",
        "resources": [
          {
            "name": "Default Resource",
            "type": "urn:umabox-rp-agent:resources:default",
            "ownerManagedAccess": false,
            "attributes": {},
            "_id": "62f5f810-8a27-482d-8148-eb1dac247b78",
            "uris": [
              "/*"
            ]
          }
        ],
        "policies": [
          {
            "id": "f38ef058-3cd2-49b0-92e0-c086844ef1c6",
            "name": "Default Policy",
            "description": "A policy that grants access only for users within this realm",
            "type": "js",
            "logic": "POSITIVE",
            "decisionStrategy": "AFFIRMATIVE",
            "config": {
              "code": "// by default, grants any permission associated with this policy\n$evaluation.grant();\n"
            }
          },
          {
            "id": "aa8e0151-7deb-48f5-8a9b-8e40aec34316",
            "name": "Default Permission",
            "description": "A permission that applies to the default resource type",
            "type": "resource",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "defaultResourceType": "urn:umabox-rp-agent:resources:default",
              "applyPolicies": "[\"Default Policy\"]"
            }
          }
        ],
        "scopes": [],
        "decisionStrategy": "UNANIMOUS"
      }
    },
    {
      "id": "815e885c-4c88-44f1-9ced-deb0f55c366d",
      "clientId": "umabox-rs",
      "name": "Resource Server",
      "rootUrl": "http://localhost:3000/",
      "adminUrl": "http://acme:3000/",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [
        "http://localhost:3000/*"
      ],
      "webOrigins": [
        "http://localhost:3000"
      ],
      "notBefore": 0,
      "bearerOnly": true,
      "consentRequired": false,
      "standardFlowEnabled": true,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": true,
      "serviceAccountsEnabled": false,
      "publicClient": false,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {
        "saml.assertion.signature": "false",
        "saml.multivalued.roles": "false",
        "saml.force.post.binding": "false",
        "saml.encrypt": "false",
        "backchannel.logout.revoke.offline.tokens": "false",
        "saml.server.signature": "false",
        "saml.server.signature.keyinfo.ext": "false",
        "exclude.session.state.from.auth.response": "false",
        "backchannel.logout.session.required": "true",
        "client_credentials.use_refresh_token": "false",
        "saml_force_name_id_format": "false",
        "saml.client.signature": "false",
        "tls.client.certificate.bound.access.tokens": "false",
        "saml.authnstatement": "false",
        "display.on.consent.screen": "false",
        "saml.onetimeuse.condition": "false"
      },
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": true,
      "nodeReRegistrationTimeout": -1,
      "defaultClientScopes": [
        "web-origins",
        "role_list",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ]
    },
    {
      "id": "51e54aa1-31b3-47c4-88d8-4fd22bb86bdd",
      "clientId": "umabox-rs-service",
      "name": "Resource Server Service",
      "rootUrl": "http://acme:4000/",
      "adminUrl": "http://acme:4000/",
      "surrogateAuthRequired": false,
      "enabled": true,
      "alwaysDisplayInConsole": false,
      "clientAuthenticatorType": "client-secret",
      "secret": "**********",
      "redirectUris": [
        "http://localhost:4000/*"
      ],
      "webOrigins": [
        "http://localhost:4000"
      ],
      "notBefore": 0,
      "bearerOnly": false,
      "consentRequired": false,
      "standardFlowEnabled": false,
      "implicitFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": true,
      "authorizationServicesEnabled": true,
      "publicClient": false,
      "frontchannelLogout": false,
      "protocol": "openid-connect",
      "attributes": {
        "saml.assertion.signature": "false",
        "saml.multivalued.roles": "false",
        "saml.force.post.binding": "false",
        "saml.encrypt": "false",
        "backchannel.logout.revoke.offline.tokens": "false",
        "saml.server.signature": "false",
        "saml.server.signature.keyinfo.ext": "false",
        "exclude.session.state.from.auth.response": "false",
        "backchannel.logout.session.required": "true",
        "client_credentials.use_refresh_token": "false",
        "saml_force_name_id_format": "false",
        "saml.client.signature": "false",
        "tls.client.certificate.bound.access.tokens": "false",
        "saml.authnstatement": "false",
        "display.on.consent.screen": "false",
        "saml.onetimeuse.condition": "false"
      },
      "authenticationFlowBindingOverrides": {},
      "fullScopeAllowed": true,
      "nodeReRegistrationTimeout": -1,
      "protocolMappers": [
        {
          "id": "c4758933-c124-4613-9cfa-157d9524c16b",
          "name": "Client ID",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "clientId",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "clientId",
            "jsonType.label": "String"
          }
        },
        {
          "id": "100a9b75-2a5e-43e5-8d2e-b5e6aa11e08c",
          "name": "Client Host",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "clientHost",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "clientHost",
            "jsonType.label": "String"
          }
        },
        {
          "id": "4d974548-68d6-4158-8d8d-d7d535624c24",
          "name": "Client IP Address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usersessionmodel-note-mapper",
          "consentRequired": false,
          "config": {
            "user.session.note": "clientAddress",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "clientAddress",
            "jsonType.label": "String"
          }
        }
      ],
      "defaultClientScopes": [
        "web-origins",
        "role_list",
        "profile",
        "roles",
        "email"
      ],
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ],
      "authorizationSettings": {
        "allowRemoteResourceManagement": true,
        "policyEnforcementMode": "ENFORCING",
        "resources": [
          {
            "name": "Incoming Box",
            "type": "http://email.com/message",
            "ownerManagedAccess": true,
            "displayName": "Incoming Box",
            "attributes": {},
            "_id": "c67df3dc-9768-49d8-979c-251c8a566b77",
            "uris": [
              "/mailbox/*"
            ],
            "scopes": [
              {
                "name": "message:create"
              }
            ]
          },
          {
            "name": "Outgoing Box",
            "type": "http://email.com/message",
            "ownerManagedAccess": true,
            "displayName": "Outgoing Box",
            "attributes": {},
            "_id": "38eaaeba-3ad1-41f7-9b8e-96f4da7c927a",
            "uris": [
              "/mailbox/*"
            ],
            "scopes": [
              {
                "name": "message:view"
              }
            ]
          },
          {
            "name": "Default Resource",
            "type": "urn:umabox-rs-service:resources:default",
            "ownerManagedAccess": false,
            "attributes": {},
            "_id": "c74c95c2-9189-41e4-b623-2f52273691b8",
            "uris": [
              "/*"
            ]
          },
          {
            "name": "Email Resource",
            "type": "http://email.com/message",
            "ownerManagedAccess": false,
            "displayName": "Email Resource",
            "attributes": {},
            "_id": "032fda2f-36d9-4c24-9469-cf32f731c6a8",
            "uris": [
              "/mailbox/*"
            ]
          }
        ],
        "policies": [
          {
            "id": "9284f21c-4b22-4db4-997b-ea69fe32b8b5",
            "name": "Requesting Party Agent Client Policy",
            "description": "Requesting Party Agent has access",
            "type": "client",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "clients": "[\"umabox-rp-agent\"]"
            }
          },
          {
            "id": "7faffba2-a6af-4fdd-989c-dca5c03ccca1",
            "name": "AEMS Grant",
            "description": "A policy that grants access to recipients",
            "type": "js",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "code": "var context = $evaluation.context;\nvar permission = $evaluation.getPermission();\nvar identity = context.getIdentity();\n// var xyz = $evaluation.getPermissionTicket();\n\nvar accessToken = identity.getAccessToken();\n\nvar identityAttributes = identity.getAttributes();\nvar contextAttributes = context.attributes;\nvar resource = $evaluation.getPermission().getResource();\nvar resourceAttributes = resource.getAttributes();\n\n// print(identityAttributes.toMap());\n// print(contextAttributes.toMap());\n// print(permission.getClaims());\n\nvar codeVerifier = identityAttributes.getValue('code-verifier').asString(0);\nvar codeChallenge = contextAttributes.getValue('code-challenge').asString(0);\n\n// print(codeVerifier);\n// print(codeChallenge);\n\n// https://geraintluff.github.io/sha256/\nvar sha256 = function sha256(ascii) {\n    function rightRotate(value, amount) {\n        return (value>>>amount) | (value<<(32 - amount));\n    };\n    \n    var mathPow = Math.pow;\n    var maxWord = mathPow(2, 32);\n    var lengthProperty = 'length'\n    var i, j; // Used as a counter across the whole file\n    var result = ''\n\n    var words = [];\n    var asciiBitLength = ascii[lengthProperty]*8;\n    \n    //* caching results is optional - remove/add slash from front of this line to toggle\n    // Initial hash value: first 32 bits of the fractional parts of the square roots of the first 8 primes\n    // (we actually calculate the first 64, but extra values are just ignored)\n    var hash = sha256.h = sha256.h || [];\n    // Round constants: first 32 bits of the fractional parts of the cube roots of the first 64 primes\n    var k = sha256.k = sha256.k || [];\n    var primeCounter = k[lengthProperty];\n    /*/\n    var hash = [], k = [];\n    var primeCounter = 0;\n    //*/\n\n    var isComposite = {};\n    for (var candidate = 2; primeCounter < 64; candidate++) {\n        if (!isComposite[candidate]) {\n            for (i = 0; i < 313; i += candidate) {\n                isComposite[i] = candidate;\n            }\n            hash[primeCounter] = (mathPow(candidate, .5)*maxWord)|0;\n            k[primeCounter++] = (mathPow(candidate, 1/3)*maxWord)|0;\n        }\n    }\n    \n    ascii += '\\x80' // Append Ƈ' bit (plus zero padding)\n    while (ascii[lengthProperty]%64 - 56) ascii += '\\x00' // More zero padding\n    for (i = 0; i < ascii[lengthProperty]; i++) {\n        j = ascii.charCodeAt(i);\n        if (j>>8) return; // ASCII check: only accept characters in range 0-255\n        words[i>>2] |= j << ((3 - i)%4)*8;\n    }\n    words[words[lengthProperty]] = ((asciiBitLength/maxWord)|0);\n    words[words[lengthProperty]] = (asciiBitLength)\n    \n    // process each chunk\n    for (j = 0; j < words[lengthProperty];) {\n        var w = words.slice(j, j += 16); // The message is expanded into 64 words as part of the iteration\n        var oldHash = hash;\n        // This is now the undefinedworking hash\", often labelled as variables a...g\n        // (we have to truncate as well, otherwise extra entries at the end accumulate\n        hash = hash.slice(0, 8);\n        \n        for (i = 0; i < 64; i++) {\n            var i2 = i + j;\n            // Expand the message into 64 words\n            // Used below if \n            var w15 = w[i - 15], w2 = w[i - 2];\n\n            // Iterate\n            var a = hash[0], e = hash[4];\n            var temp1 = hash[7]\n                + (rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) // S1\n                + ((e&hash[5])^((~e)&hash[6])) // ch\n                + k[i]\n                // Expand the message schedule if needed\n                + (w[i] = (i < 16) ? w[i] : (\n                        w[i - 16]\n                        + (rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ (w15>>>3)) // s0\n                        + w[i - 7]\n                        + (rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ (w2>>>10)) // s1\n                    )|0\n                );\n            // This is only used once, so *could* be moved below, but it only saves 4 bytes and makes things unreadble\n            var temp2 = (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) // S0\n                + ((a&hash[1])^(a&hash[2])^(hash[1]&hash[2])); // maj\n            \n            hash = [(temp1 + temp2)|0].concat(hash); // We don't bother trimming off the extra ones, they're harmless as long as we're truncating when we do the slice()\n            hash[4] = (hash[4] + temp1)|0;\n        }\n        \n        for (i = 0; i < 8; i++) {\n            hash[i] = (hash[i] + oldHash[i])|0;\n        }\n    }\n    \n    for (i = 0; i < 8; i++) {\n        for (j = 3; j + 1; j--) {\n            var b = (hash[i]>>(j*8))&255;\n            result += ((b < 16) ? 0 : '') + b.toString(16);\n        }\n    }\n    return result;\n};\n\n// print(sha256(codeVerifier));\n// print(codeChallenge.localeCompare(sha256(codeVerifier)));\n\nif (codeChallenge.localeCompare(sha256(codeVerifier)) === 0) {\n  $evaluation.grant();    \n} else {\n  print('evaluation denied after code verification');    \n  $evaluation.deny();\n}\n\n// $evaluation.deny();\n\n"
            }
          },
          {
            "id": "3384fab3-b3ca-42e3-bfa7-458d32cda0e0",
            "name": "Default Policy",
            "description": "A policy that grants access only for users within this realm",
            "type": "js",
            "logic": "POSITIVE",
            "decisionStrategy": "AFFIRMATIVE",
            "config": {
              "code": "// by default, grants any permission associated with this policy\n$evaluation.grant();\n"
            }
          },
          {
            "id": "9c382517-3cb6-4d81-923f-cc61290ee889",
            "name": "Ticket Verifier",
            "description": "Verifies a ticket",
            "type": "js",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "code": "var context = $evaluation.context;\nvar identity = context.getIdentity();\n\nvar identityAttributes = identity.getAttributes();\n\nvar ticketVerifier = identityAttributes.getValue('ticket_verifier');\nvar ticketChallenge = identityAttributes.getValue('ticket_challenge');\n\nif (ticketVerifier && ticketChallenge) {\n    var ticketVerifierStr = ticketVerifier.asString(0);\n    var ticketChallengeStr = ticketChallenge.asString(0);\n\n    // print('ticketVerifierStr: ' + ticketVerifierStr);\n    // print('ticketChallengeStr: ' + ticketChallengeStr);\n\n    var MessageDigest = Java.type('java.security.MessageDigest');\n    var JavaString = Java.type('java.lang.String');\n    var Base64Url = Java.type('org.keycloak.common.util.Base64Url');\n\n    var ticketVerifierString = new JavaString(ticketVerifierStr);\n    var md = MessageDigest.getInstance(\"SHA-256\");\n    var ticketVerifierHash = Base64Url.encode(md.digest(ticketVerifierString.getBytes('UTF-8')));\n\n    if (ticketChallengeStr.localeCompare(ticketVerifierHash) === 0) {\n      print('evaluation granted (ticket verified)');\n      $evaluation.grant();\n    } else {\n      print('evaluation denied (ticket mishmash)');\n      $evaluation.deny();\n    }\n} else {\n    print('evaluation denied (cannot verify ticket)');\n    $evaluation.deny();\n}\n"
            }
          },
          {
            "id": "6687ca3c-787a-408b-a8c4-3edc8a5e8c2b",
            "name": "Issuer Verifier",
            "description": "Verifies an issuer",
            "type": "js",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "code": "var context = $evaluation.context;\nvar identity = context.getIdentity();\n\nvar identityAttributes = identity.getAttributes();\n\nvar issuer = identityAttributes.getValue('issuer');\nvar jwksUri = identityAttributes.getValue('jwks_uri');\n\nif (issuer && jwksUri) {\n    var issuerStr = issuer.asString(0);\n    var jwksUriStr = jwksUri.asString(0);\n\n    // print('issuerStr: ' + issuerStr);\n    // print('jwksUriStr: ' + jwksUriStr);\n\n    if (issuerStr.localeCompare(jwksUriStr) === 0) {\n      print('evaluation granted (issuer verified)');\n      $evaluation.grant();\n    } else {\n      print('evaluation denied (issuer mishmash)');\n      $evaluation.deny();\n    }\n} else {\n    print('evaluation denied (cannot verify issuer)');\n    $evaluation.deny();\n}\n"
            }
          },
          {
            "id": "c0868a7f-f0b0-4ddc-9ab4-1590c34e2545",
            "name": "Email Resource Permission",
            "description": "Email Resource Permission",
            "type": "resource",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "defaultResourceType": "http://email.com/message",
              "applyPolicies": "[\"Issuer Verifier\",\"Ticket Verifier\"]"
            }
          },
          {
            "id": "55faaea2-282e-4f0a-abcd-58b138061a88",
            "name": "Default Permission",
            "description": "A permission that applies to the default resource type",
            "type": "resource",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "defaultResourceType": "urn:umabox-rs-service:resources:default",
              "applyPolicies": "[\"Default Policy\"]"
            }
          }
        ],
        "scopes": [
          {
            "id": "3890a738-ebd7-4132-990b-8b7e809ea663",
            "name": "message:create",
            "displayName": "Create Message"
          },
          {
            "id": "f75cb148-e53f-4f40-b1d9-a5ad4c4c6fd3",
            "name": "message:delete",
            "displayName": "Delete Message"
          },
          {
            "id": "02e073b8-5f02-4ad5-a0b7-dd0074844e07",
            "name": "message:view",
            "displayName": "View Messages"
          }
        ],
        "decisionStrategy": "UNANIMOUS"
      }
    }
  ],
  "clientScopes": [
    {
      "id": "9e825ade-d50e-4958-9fc3-3b620322c90b",
      "name": "offline_access",
      "description": "OpenID Connect built-in scope: offline_access",
      "protocol": "openid-connect",
      "attributes": {
        "consent.screen.text": "${offlineAccessScopeConsentText}",
        "display.on.consent.screen": "true"
      }
    },
    {
      "id": "9a8b29e9-f9fb-49e9-b0a9-986ee4e5a04d",
      "name": "role_list",
      "description": "SAML role list",
      "protocol": "saml",
      "attributes": {
        "consent.screen.text": "${samlRoleListScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "protocolMappers": [
        {
          "id": "0628766f-a2ce-46dd-8b7b-27882e78c994",
          "name": "role list",
          "protocol": "saml",
          "protocolMapper": "saml-role-list-mapper",
          "consentRequired": false,
          "config": {
            "single": "false",
            "attribute.nameformat": "Basic",
            "attribute.name": "Role"
          }
        }
      ]
    },
    {
      "id": "14e233f6-b2bd-4590-8eaf-5eecadbb0e61",
      "name": "profile",
      "description": "OpenID Connect built-in scope: profile",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "true",
        "consent.screen.text": "${profileScopeConsentText}"
      },
      "protocolMappers": [
        {
          "id": "69bdcee2-7c26-4392-92fc-e1cc8a70a37d",
          "name": "locale",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "locale",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "locale",
            "jsonType.label": "String"
          }
        },
        {
          "id": "b50f4013-40b1-4ce1-bdfa-51ffa48772dd",
          "name": "family name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "lastName",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "family_name",
            "jsonType.label": "String"
          }
        },
        {
          "id": "7f350c1a-aa29-419f-8840-0fe232766b71",
          "name": "zoneinfo",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "zoneinfo",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "zoneinfo",
            "jsonType.label": "String"
          }
        },
        {
          "id": "cd140931-6b21-4c2e-bc13-b87c8351565e",
          "name": "profile",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "profile",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "profile",
            "jsonType.label": "String"
          }
        },
        {
          "id": "14c9575f-fbdb-4ac0-9a85-4ee4201d8ed3",
          "name": "gender",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "gender",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "gender",
            "jsonType.label": "String"
          }
        },
        {
          "id": "5b724dc8-58fa-4586-99f6-961215d182ee",
          "name": "birthdate",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "birthdate",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "birthdate",
            "jsonType.label": "String"
          }
        },
        {
          "id": "1dc10c04-5f1b-4968-ba46-dc7deeb9f1eb",
          "name": "middle name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "middleName",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "middle_name",
            "jsonType.label": "String"
          }
        },
        {
          "id": "a0120c28-acf7-429f-90d6-31afd13eb3fd",
          "name": "username",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "username",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "preferred_username",
            "jsonType.label": "String"
          }
        },
        {
          "id": "3394b331-1273-4ce3-9b6a-975736822dc5",
          "name": "nickname",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "nickname",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "nickname",
            "jsonType.label": "String"
          }
        },
        {
          "id": "1ac4036c-b06a-400d-868b-c4eae856334a",
          "name": "website",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "website",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "website",
            "jsonType.label": "String"
          }
        },
        {
          "id": "11bf5e84-f324-4e74-a65a-3a38c45f1e31",
          "name": "given name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "firstName",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "given_name",
            "jsonType.label": "String"
          }
        },
        {
          "id": "c7643694-2c77-4229-963a-ad20e6840ac4",
          "name": "full name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-full-name-mapper",
          "consentRequired": false,
          "config": {
            "id.token.claim": "true",
            "access.token.claim": "true",
            "userinfo.token.claim": "true"
          }
        },
        {
          "id": "0ea72866-10e4-4b9d-8b41-270edeee399e",
          "name": "picture",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "picture",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "picture",
            "jsonType.label": "String"
          }
        },
        {
          "id": "f1bd45db-d1de-4452-b920-3d47aef2167e",
          "name": "updated at",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "updatedAt",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "updated_at",
            "jsonType.label": "String"
          }
        }
      ]
    },
    {
      "id": "207814b3-4dd7-43df-9dc9-ffb55b7d45cd",
      "name": "email",
      "description": "OpenID Connect built-in scope: email",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "true",
        "consent.screen.text": "${emailScopeConsentText}"
      },
      "protocolMappers": [
        {
          "id": "0e2e25ca-8a94-4ce1-8c77-8b3082496917",
          "name": "email verified",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "emailVerified",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "email_verified",
            "jsonType.label": "boolean"
          }
        },
        {
          "id": "fe48a74f-6e71-43bb-838c-7836cadb57dc",
          "name": "email",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "email",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "email",
            "jsonType.label": "String"
          }
        }
      ]
    },
    {
      "id": "d157e53a-432c-4e62-9edc-96b6720bbded",
      "name": "address",
      "description": "OpenID Connect built-in scope: address",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "true",
        "consent.screen.text": "${addressScopeConsentText}"
      },
      "protocolMappers": [
        {
          "id": "69821866-4a84-4b9b-bf9d-0768c65980b7",
          "name": "address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-address-mapper",
          "consentRequired": false,
          "config": {
            "user.attribute.formatted": "formatted",
            "user.attribute.country": "country",
            "user.attribute.postal_code": "postal_code",
            "userinfo.token.claim": "true",
            "user.attribute.street": "street",
            "id.token.claim": "true",
            "user.attribute.region": "region",
            "access.token.claim": "true",
            "user.attribute.locality": "locality"
          }
        }
      ]
    },
    {
      "id": "d4535e2b-fda2-431c-817e-116f261e55c0",
      "name": "phone",
      "description": "OpenID Connect built-in scope: phone",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "true",
        "consent.screen.text": "${phoneScopeConsentText}"
      },
      "protocolMappers": [
        {
          "id": "d12482a8-1caa-48a7-a6d5-0441a6f77780",
          "name": "phone number verified",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "phoneNumberVerified",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "phone_number_verified",
            "jsonType.label": "boolean"
          }
        },
        {
          "id": "8301324e-ec32-4257-904c-92d41d2e11e6",
          "name": "phone number",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "phoneNumber",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "phone_number",
            "jsonType.label": "String"
          }
        }
      ]
    },
    {
      "id": "aa8c6e7f-dbb6-48a7-bd62-80036bf4a2fd",
      "name": "roles",
      "description": "OpenID Connect scope for add user roles to the access token",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "false",
        "display.on.consent.screen": "true",
        "consent.screen.text": "${rolesScopeConsentText}"
      },
      "protocolMappers": [
        {
          "id": "efd9cc67-554f-4928-9bc8-84c404220c3b",
          "name": "realm roles",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-realm-role-mapper",
          "consentRequired": false,
          "config": {
            "user.attribute": "foo",
            "access.token.claim": "true",
            "claim.name": "realm_access.roles",
            "jsonType.label": "String",
            "multivalued": "true"
          }
        },
        {
          "id": "376adc77-8b4e-4fd3-9a55-b90d917a0688",
          "name": "audience resolve",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-audience-resolve-mapper",
          "consentRequired": false,
          "config": {}
        },
        {
          "id": "cc34ec51-310a-4627-92dd-845a54f054c9",
          "name": "client roles",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-client-role-mapper",
          "consentRequired": false,
          "config": {
            "user.attribute": "foo",
            "access.token.claim": "true",
            "claim.name": "resource_access.${client_id}.roles",
            "jsonType.label": "String",
            "multivalued": "true"
          }
        }
      ]
    },
    {
      "id": "73bcfced-5371-4849-92f4-e8016a288ad4",
      "name": "web-origins",
      "description": "OpenID Connect scope for add allowed web origins to the access token",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "false",
        "display.on.consent.screen": "false",
        "consent.screen.text": ""
      },
      "protocolMappers": [
        {
          "id": "f7ff1419-9f03-40a7-82c5-f754ead531cd",
          "name": "allowed web origins",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-allowed-origins-mapper",
          "consentRequired": false,
          "config": {}
        }
      ]
    },
    {
      "id": "963104f5-0dcc-4a9d-a1c2-5cee8367d593",
      "name": "microprofile-jwt",
      "description": "Microprofile - JWT built-in scope",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "true",
        "display.on.consent.screen": "false"
      },
      "protocolMappers": [
        {
          "id": "112c4e7d-02ba-4283-b830-92bc72b1cb60",
          "name": "upn",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "username",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "upn",
            "jsonType.label": "String"
          }
        },
        {
          "id": "1d910c26-de46-4454-b1f1-52e45ef021e6",
          "name": "groups",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-realm-role-mapper",
          "consentRequired": false,
          "config": {
            "multivalued": "true",
            "user.attribute": "foo",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "groups",
            "jsonType.label": "String"
          }
        }
      ]
    },
    {
      "id": "30c5abcc-e48f-4e1c-b512-d2078b73ea1a",
      "name": "aems-client-scope",
      "description": "Adds the AEMS protocol mapper to newly registered clients",
      "protocol": "openid-connect",
      "attributes": {
        "include.in.token.scope": "false",
        "display.on.consent.screen": "false"
      },
      "protocolMappers": [
        {
          "id": "833143ce-b0b2-4c41-8756-c28b626d719f",
          "name": "AEMS",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-script-based-protocol-mapper",
          "consentRequired": false,
          "config": {
            "id.token.claim": "false",
            "access.token.claim": "true",
            "script": "/**\n * Available variables: \n * user - the current user\n * realm - the current realm\n * token - the current token\n * userSession - the current userSession\n * keycloakSession - the current keycloakSession\n */\n\nvar HttpRequest = Java.type('org.jboss.resteasy.spi.HttpRequest');\nvar JsonWebToken = Java.type('org.keycloak.representations.JsonWebToken');\nvar JsonSerialization = Java.type('org.keycloak.util.JsonSerialization');\nvar TokenVerifier = Java.type('org.keycloak.TokenVerifier');\nvar VerifierContext = Java.type('org.keycloak.crypto.AsymmetricSignatureVerifierContext');\nvar Base64 = Java.type('java.util.Base64');\nvar JSONWebKeySet = Java.type('org.keycloak.jose.jwk.JSONWebKeySet');\nvar JsonSerialization = Java.type('org.keycloak.util.JsonSerialization');\nvar JWSInput = Java.type('org.keycloak.jose.jws.JWSInput');\nvar PublicKey = Java.type('java.security.PublicKey');\nvar JWKParser = Java.type('org.keycloak.jose.jwk.JWKParser');\nvar RSAProvider = Java.type('org.keycloak.jose.jws.crypto.RSAProvider');\n\nvar IDToken = Java.type('org.keycloak.representations.IDToken');\nvar JavaString = Java.type('java.lang.String');\n\nfunction httpGet(theUrl) {\n    var con = new java.net.URL(theUrl).openConnection();\n    con.requestMethod = \"GET\";\n    return asResponse(con);\n}\n\nfunction asResponse(con) {\n    var d = read(con.inputStream);\n    return { data: d, statusCode: con.responseCode };\n}\n\nfunction read(inputStream) {\n    var inReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));\n    var inputLine;\n    var response = new java.lang.StringBuffer();\n\n    while ((inputLine = inReader.readLine()) !== null) {\n        response.append(inputLine);\n    }\n    inReader.close();\n    return response.toString();\n}\n\nvar verifyToken = function verifyToken(token) {\n    var verifier = TokenVerifier.create(token, IDToken.class);\n    var jsonWebToken = verifier.getToken();\n    if (!jsonWebToken.isActive()) {\n        return false;\n    }\n    var kid = verifier.getHeader().getKeyId();\n    var algorithm = verifier.getHeader().getAlgorithm().name();\n    var iss = verifier.getToken().getIssuer();\n    // print('iss: '  + iss);\n    try {\n        var response = httpGet(iss).data;\n    } catch (e) {\n        return false;\n    }\n    // print('response: ' + response);\n    var jsonWebKeySet = JsonSerialization.readValue(response, JSONWebKeySet.class);\n    var jws = new JWSInput(token);\n    var k = jsonWebKeySet.getKeys();\n    var publicKey = JWKParser.create(k[0]).toPublicKey()\n    var okay = RSAProvider.verify(jws, publicKey);\n    if (okay) {\n        return verifier.getToken();\n    } else {\n        return false;\n    }\n}\n\nvar httpRequest = keycloakSession.getContext().getContextObject(HttpRequest.class);\n// print('httpRequest: ' + httpRequest.getDecodedFormParameters());\nvar jwtTicket = httpRequest.getDecodedFormParameters().getFirst(\"ticket\");\nvar pushedClaims = httpRequest.getDecodedFormParameters().getFirst(\"claim_token\"); // claim_token in Keycloak should be named as a pushed_claims\n\nvar parseClaims = function parseClaims(claims) {\n    var base64Str = claims.replace(/-/g, '+').replace(/_/g, '/');\n    var decoded = Base64.getDecoder().decode(claims);\n    return JSON.parse(new JavaString(decoded));\n}\n\nvar parseJwtToken = function parseJwtToken(token) {\n    var claims = token.split('.')[1];\n    return parseClaims(claims);\n}\n\nif (jwtTicket && pushedClaims) {\n    var ticket = parseJwtToken(jwtTicket);\n    var ticketVerifier = String(ticket.claims['ticket_verifier']);\n    // print('TicketVerifier: '  + ticketVerifier);\n    token.setOtherClaims(\"ticket_verifier\", ticketVerifier);\n\n    var pushedClaimsObj = parseClaims(pushedClaims);\n    var claimsToken = String(pushedClaimsObj['claims_token']);\n    // print('ClaimsToken: ' + claimsToken);\n    var verifiedToken = verifyToken(claimsToken);\n    var claims = verifiedToken.getOtherClaims();\n    if (claims) {\n        var ticketChallenge = claims.get('ticket_challenge');\n        var emailAddress = claims.get('email_address');\n        var domain = emailAddress.split('@')[1];\n        var issuer = verifiedToken.getIssuer();\n        var wellKnownUri = 'https://' + domain + '/.well-known/claims-configuration';\n\n        // print('well-known: ' + wellKnownUri);\n        // print('domain: ' + domain);\n        // print('Issuer: ' + issuer);\n        // print('ticket_challenge: ' + ticketChallenge);\n        // print('email_address: ' + emailAddress);\n\n        var wellKnown;\n        var wellKnownJwksUri;\n        try {\n            wellKnown = httpGet(wellKnownUri).data;\n        } catch (e) {\n            wellKnown = false;\n        }\n\n        if (wellKnown) {\n            print('wellKnown: ' + wellKnown);\n            var wellKnownObj = JSON.parse(new JavaString(wellKnown));\n            var jwksUri = wellKnownObj['jwks_uri'];\n            token.setOtherClaims(\"jwks_uri\", jwksUri);\n        }\n\n        token.setOtherClaims(\"ticket_challenge\", ticketChallenge);\n        token.setOtherClaims(\"email_address\", emailAddress);\n        token.setOtherClaims(\"issuer\", issuer);\n        token.setOtherClaims(\"domain\", domain);\n    }\n}",
            "userinfo.token.claim": "false"
          }
        }
      ]
    }
  ],
  "defaultDefaultClientScopes": [
    "role_list",
    "profile",
    "email",
    "roles",
    "web-origins",
    "aems-client-scope"
  ],
  "defaultOptionalClientScopes": [
    "offline_access",
    "address",
    "phone",
    "microprofile-jwt"
  ],
  "browserSecurityHeaders": {
    "contentSecurityPolicyReportOnly": "",
    "xContentTypeOptions": "nosniff",
    "xRobotsTag": "none",
    "xFrameOptions": "SAMEORIGIN",
    "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
    "xXSSProtection": "1; mode=block",
    "strictTransportSecurity": "max-age=31536000; includeSubDomains"
  },
  "smtpServer": {
    "password": "**********",
    "starttls": "true",
    "port": "587",
    "auth": "true",
    "host": "mail.federizer.org",
    "from": "noreply@federizer.org",
    "fromDisplayName": "Federizer Dev",
    "ssl": "",
    "user": "noreply@federizer.org"
  },
  "eventsEnabled": false,
  "eventsListeners": [
    "jboss-logging"
  ],
  "enabledEventTypes": [],
  "adminEventsEnabled": false,
  "adminEventsDetailsEnabled": false,
  "identityProviders": [
    {
      "alias": "google",
      "internalId": "3fd28b0c-5c10-467e-b3db-ffebb2439def",
      "providerId": "google",
      "enabled": true,
      "updateProfileFirstLoginMode": "on",
      "trustEmail": true,
      "storeToken": false,
      "addReadTokenRoleOnCreate": false,
      "authenticateByDefault": false,
      "linkOnly": false,
      "firstBrokerLoginFlowAlias": "first broker login",
      "config": {
        "syncMode": "IMPORT",
        "clientSecret": "**********",
        "clientId": "1016705676388-88s72caipqvkhp9dlv4s847onfqf807e.apps.googleusercontent.com",
        "useJwksUrl": "true"
      }
    }
  ],
  "identityProviderMappers": [],
  "components": {
    "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
      {
        "id": "bf023c41-72e2-43b6-bdaf-c3685f43a1e8",
        "name": "Allowed Client Scopes",
        "providerId": "allowed-client-templates",
        "subType": "anonymous",
        "subComponents": {},
        "config": {
          "allow-default-scopes": [
            "true"
          ]
        }
      },
      {
        "id": "6fa39e5c-b274-4b97-8168-bce33643623d",
        "name": "Allowed Protocol Mapper Types",
        "providerId": "allowed-protocol-mappers",
        "subType": "authenticated",
        "subComponents": {},
        "config": {
          "allowed-protocol-mapper-types": [
            "oidc-usermodel-property-mapper",
            "saml-user-property-mapper",
            "oidc-usermodel-attribute-mapper",
            "oidc-sha256-pairwise-sub-mapper",
            "oidc-address-mapper",
            "saml-user-attribute-mapper",
            "oidc-full-name-mapper",
            "saml-role-list-mapper"
          ]
        }
      },
      {
        "id": "43325b64-cd51-4f3c-a705-c2baa5ca16ee",
        "name": "Consent Required",
        "providerId": "consent-required",
        "subType": "anonymous",
        "subComponents": {},
        "config": {}
      },
      {
        "id": "f4380938-2cc0-4916-a4a2-350b0690b1ab",
        "name": "Max Clients Limit",
        "providerId": "max-clients",
        "subType": "anonymous",
        "subComponents": {},
        "config": {
          "max-clients": [
            "200"
          ]
        }
      },
      {
        "id": "abbc769c-081d-471e-9af5-57aa5508ee19",
        "name": "Allowed Protocol Mapper Types",
        "providerId": "allowed-protocol-mappers",
        "subType": "anonymous",
        "subComponents": {},
        "config": {
          "allowed-protocol-mapper-types": [
            "oidc-address-mapper",
            "oidc-sha256-pairwise-sub-mapper",
            "saml-user-property-mapper",
            "oidc-usermodel-property-mapper",
            "oidc-usermodel-attribute-mapper",
            "oidc-full-name-mapper",
            "saml-user-attribute-mapper",
            "saml-role-list-mapper"
          ]
        }
      },
      {
        "id": "2af5d008-7298-4aac-a335-456d7cc1b428",
        "name": "Trusted Hosts",
        "providerId": "trusted-hosts",
        "subType": "anonymous",
        "subComponents": {},
        "config": {
          "host-sending-registration-request-must-match": [
            "false"
          ],
          "client-uris-must-match": [
            "true"
          ]
        }
      },
      {
        "id": "ddde902e-8fdd-4759-b0f0-068bf23c37ab",
        "name": "Allowed Client Scopes",
        "providerId": "allowed-client-templates",
        "subType": "authenticated",
        "subComponents": {},
        "config": {
          "allow-default-scopes": [
            "true"
          ]
        }
      },
      {
        "id": "cd0932cd-bdd0-4d5d-b389-3fb605a4a76a",
        "name": "Full Scope Disabled",
        "providerId": "scope",
        "subType": "anonymous",
        "subComponents": {},
        "config": {}
      }
    ],
    "org.keycloak.keys.KeyProvider": [
      {
        "id": "9d52c71b-77f9-4ebf-b75a-208ade2de487",
        "name": "rsa-generated",
        "providerId": "rsa-generated",
        "subComponents": {},
        "config": {
          "priority": [
            "100"
          ]
        }
      },
      {
        "id": "61268e91-9e98-464a-b0d1-b857f0ba7d17",
        "name": "hmac-generated",
        "providerId": "hmac-generated",
        "subComponents": {},
        "config": {
          "priority": [
            "100"
          ],
          "algorithm": [
            "HS256"
          ]
        }
      },
      {
        "id": "987c4596-6e1c-4aff-93ca-8918615c5fd9",
        "name": "aes-generated",
        "providerId": "aes-generated",
        "subComponents": {},
        "config": {
          "priority": [
            "100"
          ]
        }
      }
    ]
  },
  "internationalizationEnabled": false,
  "supportedLocales": [],
  "authenticationFlows": [
    {
      "id": "b0e76184-5151-458a-90e4-1073df1b9722",
      "alias": "Account verification options",
      "description": "Method with which to verity the existing account",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "idp-email-verification",
          "requirement": "ALTERNATIVE",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "ALTERNATIVE",
          "priority": 20,
          "flowAlias": "Verify Existing Account by Re-authentication",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "id": "fe81d2d1-e26b-4740-8d9b-a161e55c37a9",
      "alias": "Authentication Options",
      "description": "Authentication options.",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "basic-auth",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "basic-auth-otp",
          "requirement": "DISABLED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "auth-spnego",
          "requirement": "DISABLED",
          "priority": 30,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "id": "b5abff37-6d4d-4677-b252-ce74116d017c",
      "alias": "Browser - Conditional OTP",
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "auth-otp-form",
          "requirement": "REQUIRED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "id": "b464e610-c99f-4e2d-b178-afa6b53e3293",
      "alias": "Direct Grant - Conditional OTP",
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "direct-grant-validate-otp",
          "requirement": "REQUIRED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "id": "35c1d4f8-7f94-4312-910b-cf70176ec814",
      "alias": "First broker login - Conditional OTP",
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "auth-otp-form",
          "requirement": "REQUIRED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "id": "2882824c-b36f-45e3-8ac8-70f088fb2cdc",
      "alias": "Handle Existing Account",
      "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "idp-confirm-link",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "REQUIRED",
          "priority": 20,
          "flowAlias": "Account verification options",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "id": "c09027f5-f4a1-4613-aba4-c7410cf1aa97",
      "alias": "Reset - Conditional OTP",
      "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "reset-otp",
          "requirement": "REQUIRED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "id": "0f00a5a7-ffb2-45f8-b8c6-03c66672adfc",
      "alias": "User creation or linking",
      "description": "Flow for the existing/non-existing user alternatives",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticatorConfig": "create unique user config",
          "authenticator": "idp-create-user-if-unique",
          "requirement": "ALTERNATIVE",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "ALTERNATIVE",
          "priority": 20,
          "flowAlias": "Handle Existing Account",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "id": "cfce2e4a-c9c2-4952-b289-85231f4d135f",
      "alias": "Verify Existing Account by Re-authentication",
      "description": "Reauthentication of existing account",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "idp-username-password-form",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "CONDITIONAL",
          "priority": 20,
          "flowAlias": "First broker login - Conditional OTP",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "id": "623a1aa7-72fc-430a-adb2-f4e1eae218fb",
      "alias": "browser",
      "description": "browser based authentication",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "auth-cookie",
          "requirement": "ALTERNATIVE",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "auth-spnego",
          "requirement": "DISABLED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "identity-provider-redirector",
          "requirement": "ALTERNATIVE",
          "priority": 25,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "ALTERNATIVE",
          "priority": 30,
          "flowAlias": "forms",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "id": "c37445bb-e199-4c21-a731-231505788f7a",
      "alias": "clients",
      "description": "Base authentication for clients",
      "providerId": "client-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "client-secret",
          "requirement": "ALTERNATIVE",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "client-jwt",
          "requirement": "ALTERNATIVE",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "client-secret-jwt",
          "requirement": "ALTERNATIVE",
          "priority": 30,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "client-x509",
          "requirement": "ALTERNATIVE",
          "priority": 40,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "id": "f99282b3-0f66-479b-9ff3-8c98c0d324c6",
      "alias": "direct grant",
      "description": "OpenID Connect Resource Owner Grant",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "direct-grant-validate-username",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "direct-grant-validate-password",
          "requirement": "REQUIRED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "CONDITIONAL",
          "priority": 30,
          "flowAlias": "Direct Grant - Conditional OTP",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "id": "47a597e3-772c-4207-9d91-dbd57f63f452",
      "alias": "docker auth",
      "description": "Used by Docker clients to authenticate against the IDP",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "docker-http-basic-authenticator",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "id": "39a38e3c-f6a7-4741-994b-a7b95cb2d75c",
      "alias": "first broker login",
      "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticatorConfig": "review profile config",
          "authenticator": "idp-review-profile",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "REQUIRED",
          "priority": 20,
          "flowAlias": "User creation or linking",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "id": "7a407480-1b22-4995-a6b0-fa04a7a01e12",
      "alias": "forms",
      "description": "Username, password, otp and other auth forms.",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "auth-username-password-form",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "CONDITIONAL",
          "priority": 20,
          "flowAlias": "Browser - Conditional OTP",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "id": "20f532c0-c586-4c08-8da0-b10b0c0cd336",
      "alias": "http challenge",
      "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "no-cookie-redirect",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "REQUIRED",
          "priority": 20,
          "flowAlias": "Authentication Options",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "id": "9f940005-5ede-4552-a0bf-c963cedee33d",
      "alias": "registration",
      "description": "registration flow",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "registration-page-form",
          "requirement": "REQUIRED",
          "priority": 10,
          "flowAlias": "registration form",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "id": "d4fb369f-c7c4-4916-8caa-63c21407da27",
      "alias": "registration form",
      "description": "registration form",
      "providerId": "form-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "registration-user-creation",
          "requirement": "REQUIRED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "registration-profile-action",
          "requirement": "REQUIRED",
          "priority": 40,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "registration-password-action",
          "requirement": "REQUIRED",
          "priority": 50,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "registration-recaptcha-action",
          "requirement": "DISABLED",
          "priority": 60,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "id": "0b0f7611-693f-4fa7-b7ae-eec959ab4427",
      "alias": "reset credentials",
      "description": "Reset credentials for a user if they forgot their password or something",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "reset-credentials-choose-user",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "reset-credential-email",
          "requirement": "REQUIRED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "reset-password",
          "requirement": "REQUIRED",
          "priority": 30,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "CONDITIONAL",
          "priority": 40,
          "flowAlias": "Reset - Conditional OTP",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "id": "cd765df6-3e36-48af-8de9-8630e3e113a2",
      "alias": "saml ecp",
      "description": "SAML ECP Profile Authentication Flow",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "http-basic-authenticator",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    }
  ],
  "authenticatorConfig": [
    {
      "id": "4c4fb619-f6e7-44ba-8dc1-136f602f891d",
      "alias": "create unique user config",
      "config": {
        "require.password.update.after.registration": "false"
      }
    },
    {
      "id": "d563ef24-f80f-4a5a-a3dd-ae41ddf17151",
      "alias": "review profile config",
      "config": {
        "update.profile.on.first.login": "missing"
      }
    }
  ],
  "requiredActions": [
    {
      "alias": "CONFIGURE_TOTP",
      "name": "Configure OTP",
      "providerId": "CONFIGURE_TOTP",
      "enabled": true,
      "defaultAction": false,
      "priority": 10,
      "config": {}
    },
    {
      "alias": "terms_and_conditions",
      "name": "Terms and Conditions",
      "providerId": "terms_and_conditions",
      "enabled": false,
      "defaultAction": false,
      "priority": 20,
      "config": {}
    },
    {
      "alias": "UPDATE_PASSWORD",
      "name": "Update Password",
      "providerId": "UPDATE_PASSWORD",
      "enabled": true,
      "defaultAction": false,
      "priority": 30,
      "config": {}
    },
    {
      "alias": "UPDATE_PROFILE",
      "name": "Update Profile",
      "providerId": "UPDATE_PROFILE",
      "enabled": true,
      "defaultAction": false,
      "priority": 40,
      "config": {}
    },
    {
      "alias": "VERIFY_EMAIL",
      "name": "Verify Email",
      "providerId": "VERIFY_EMAIL",
      "enabled": true,
      "defaultAction": false,
      "priority": 50,
      "config": {}
    },
    {
      "alias": "delete_account",
      "name": "Delete Account",
      "providerId": "delete_account",
      "enabled": false,
      "defaultAction": false,
      "priority": 60,
      "config": {}
    },
    {
      "alias": "update_user_locale",
      "name": "Update User Locale",
      "providerId": "update_user_locale",
      "enabled": true,
      "defaultAction": false,
      "priority": 1000,
      "config": {}
    }
  ],
  "browserFlow": "browser",
  "registrationFlow": "registration",
  "directGrantFlow": "direct grant",
  "resetCredentialsFlow": "reset credentials",
  "clientAuthenticationFlow": "clients",
  "dockerAuthenticationFlow": "docker auth",
  "attributes": {
    "clientOfflineSessionMaxLifespan": "0",
    "clientSessionIdleTimeout": "0",
    "clientSessionMaxLifespan": "0",
    "clientOfflineSessionIdleTimeout": "0"
  },
  "keycloakVersion": "12.0.4",
  "userManagedAccessAllowed": false
}