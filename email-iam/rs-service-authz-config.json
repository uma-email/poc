{
  "allowRemoteResourceManagement": true,
  "policyEnforcementMode": "ENFORCING",
  "resources": [
    {
      "name": "Incoming Box",
      "type": "http://email.com/message",
      "ownerManagedAccess": true,
      "displayName": "Incoming Box",
      "attributes": {},
      "_id": "c67df3dc-9768-49d8-979c-251c8a566b77",
      "uris": [
        "/mailbox/*"
      ],
      "scopes": [
        {
          "name": "message:create"
        }
      ]
    },
    {
      "name": "Outgoing Box",
      "type": "http://email.com/message",
      "ownerManagedAccess": true,
      "displayName": "Outgoing Box",
      "attributes": {},
      "_id": "38eaaeba-3ad1-41f7-9b8e-96f4da7c927a",
      "uris": [
        "/mailbox/*"
      ],
      "scopes": [
        {
          "name": "message:view"
        }
      ]
    },
    {
      "name": "Default Resource",
      "type": "urn:umabox-rs-service:resources:default",
      "ownerManagedAccess": false,
      "attributes": {},
      "_id": "c74c95c2-9189-41e4-b623-2f52273691b8",
      "uris": [
        "/*"
      ]
    },
    {
      "name": "Email Resource",
      "type": "http://email.com/message",
      "ownerManagedAccess": false,
      "displayName": "Email Resource",
      "attributes": {},
      "_id": "032fda2f-36d9-4c24-9469-cf32f731c6a8",
      "uris": [
        "/mailbox/*"
      ]
    }
  ],
  "policies": [
    {
      "id": "9284f21c-4b22-4db4-997b-ea69fe32b8b5",
      "name": "Requesting Party Agent Client Policy",
      "description": "Requesting Party Agent has access",
      "type": "client",
      "logic": "POSITIVE",
      "decisionStrategy": "UNANIMOUS",
      "config": {
        "clients": "[\"umabox-rp-agent\"]"
      }
    },
    {
      "id": "7faffba2-a6af-4fdd-989c-dca5c03ccca1",
      "name": "AEMS Grant",
      "description": "A policy that grants access to recipients",
      "type": "js",
      "logic": "POSITIVE",
      "decisionStrategy": "UNANIMOUS",
      "config": {
        "code": "var context = $evaluation.context;\nvar permission = $evaluation.getPermission();\nvar identity = context.getIdentity();\n// var xyz = $evaluation.getPermissionTicket();\n\nvar accessToken = identity.getAccessToken();\n\nvar identityAttributes = identity.getAttributes();\nvar contextAttributes = context.attributes;\nvar resource = $evaluation.getPermission().getResource();\nvar resourceAttributes = resource.getAttributes();\n\n// print(identityAttributes.toMap());\n// print(contextAttributes.toMap());\n// print(permission.getClaims());\n\nvar codeVerifier = identityAttributes.getValue('code-verifier').asString(0);\nvar codeChallenge = contextAttributes.getValue('code-challenge').asString(0);\n\n// print(codeVerifier);\n// print(codeChallenge);\n\n// https://geraintluff.github.io/sha256/\nvar sha256 = function sha256(ascii) {\n    function rightRotate(value, amount) {\n        return (value>>>amount) | (value<<(32 - amount));\n    };\n    \n    var mathPow = Math.pow;\n    var maxWord = mathPow(2, 32);\n    var lengthProperty = 'length'\n    var i, j; // Used as a counter across the whole file\n    var result = ''\n\n    var words = [];\n    var asciiBitLength = ascii[lengthProperty]*8;\n    \n    //* caching results is optional - remove/add slash from front of this line to toggle\n    // Initial hash value: first 32 bits of the fractional parts of the square roots of the first 8 primes\n    // (we actually calculate the first 64, but extra values are just ignored)\n    var hash = sha256.h = sha256.h || [];\n    // Round constants: first 32 bits of the fractional parts of the cube roots of the first 64 primes\n    var k = sha256.k = sha256.k || [];\n    var primeCounter = k[lengthProperty];\n    /*/\n    var hash = [], k = [];\n    var primeCounter = 0;\n    //*/\n\n    var isComposite = {};\n    for (var candidate = 2; primeCounter < 64; candidate++) {\n        if (!isComposite[candidate]) {\n            for (i = 0; i < 313; i += candidate) {\n                isComposite[i] = candidate;\n            }\n            hash[primeCounter] = (mathPow(candidate, .5)*maxWord)|0;\n            k[primeCounter++] = (mathPow(candidate, 1/3)*maxWord)|0;\n        }\n    }\n    \n    ascii += '\\x80' // Append Æ‡' bit (plus zero padding)\n    while (ascii[lengthProperty]%64 - 56) ascii += '\\x00' // More zero padding\n    for (i = 0; i < ascii[lengthProperty]; i++) {\n        j = ascii.charCodeAt(i);\n        if (j>>8) return; // ASCII check: only accept characters in range 0-255\n        words[i>>2] |= j << ((3 - i)%4)*8;\n    }\n    words[words[lengthProperty]] = ((asciiBitLength/maxWord)|0);\n    words[words[lengthProperty]] = (asciiBitLength)\n    \n    // process each chunk\n    for (j = 0; j < words[lengthProperty];) {\n        var w = words.slice(j, j += 16); // The message is expanded into 64 words as part of the iteration\n        var oldHash = hash;\n        // This is now the undefinedworking hash\", often labelled as variables a...g\n        // (we have to truncate as well, otherwise extra entries at the end accumulate\n        hash = hash.slice(0, 8);\n        \n        for (i = 0; i < 64; i++) {\n            var i2 = i + j;\n            // Expand the message into 64 words\n            // Used below if \n            var w15 = w[i - 15], w2 = w[i - 2];\n\n            // Iterate\n            var a = hash[0], e = hash[4];\n            var temp1 = hash[7]\n                + (rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) // S1\n                + ((e&hash[5])^((~e)&hash[6])) // ch\n                + k[i]\n                // Expand the message schedule if needed\n                + (w[i] = (i < 16) ? w[i] : (\n                        w[i - 16]\n                        + (rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ (w15>>>3)) // s0\n                        + w[i - 7]\n                        + (rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ (w2>>>10)) // s1\n                    )|0\n                );\n            // This is only used once, so *could* be moved below, but it only saves 4 bytes and makes things unreadble\n            var temp2 = (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) // S0\n                + ((a&hash[1])^(a&hash[2])^(hash[1]&hash[2])); // maj\n            \n            hash = [(temp1 + temp2)|0].concat(hash); // We don't bother trimming off the extra ones, they're harmless as long as we're truncating when we do the slice()\n            hash[4] = (hash[4] + temp1)|0;\n        }\n        \n        for (i = 0; i < 8; i++) {\n            hash[i] = (hash[i] + oldHash[i])|0;\n        }\n    }\n    \n    for (i = 0; i < 8; i++) {\n        for (j = 3; j + 1; j--) {\n            var b = (hash[i]>>(j*8))&255;\n            result += ((b < 16) ? 0 : '') + b.toString(16);\n        }\n    }\n    return result;\n};\n\n// print(sha256(codeVerifier));\n// print(codeChallenge.localeCompare(sha256(codeVerifier)));\n\nif (codeChallenge.localeCompare(sha256(codeVerifier)) === 0) {\n  $evaluation.grant();    \n} else {\n  print('evaluation denied after code verification');    \n  $evaluation.deny();\n}\n\n// $evaluation.deny();\n\n"
      }
    },
    {
      "id": "3384fab3-b3ca-42e3-bfa7-458d32cda0e0",
      "name": "Default Policy",
      "description": "A policy that grants access only for users within this realm",
      "type": "js",
      "logic": "POSITIVE",
      "decisionStrategy": "AFFIRMATIVE",
      "config": {
        "code": "// by default, grants any permission associated with this policy\n$evaluation.grant();\n"
      }
    },
    {
      "id": "9c382517-3cb6-4d81-923f-cc61290ee889",
      "name": "Ticket Verifier",
      "description": "Verifies a ticket",
      "type": "js",
      "logic": "POSITIVE",
      "decisionStrategy": "UNANIMOUS",
      "config": {
        "code": "var context = $evaluation.context;\nvar identity = context.getIdentity();\n\nvar identityAttributes = identity.getAttributes();\n\nvar ticketVerifier = identityAttributes.getValue('ticket_verifier');\nvar ticketChallenge = identityAttributes.getValue('ticket_challenge');\n\nif (ticketVerifier && ticketChallenge) {\n    var ticketVerifierStr = ticketVerifier.asString(0);\n    var ticketChallengeStr = ticketChallenge.asString(0);\n\n    // print('ticketVerifierStr: ' + ticketVerifierStr);\n    // print('ticketChallengeStr: ' + ticketChallengeStr);\n\n    var MessageDigest = Java.type('java.security.MessageDigest');\n    var JavaString = Java.type('java.lang.String');\n    var Base64Url = Java.type('org.keycloak.common.util.Base64Url');\n\n    var ticketVerifierString = new JavaString(ticketVerifierStr);\n    var md = MessageDigest.getInstance(\"SHA-256\");\n    var ticketVerifierHash = Base64Url.encode(md.digest(ticketVerifierString.getBytes('UTF-8')));\n\n    if (ticketChallengeStr.localeCompare(ticketVerifierHash) === 0) {\n      print('evaluation granted (ticket verified)');\n      $evaluation.grant();\n    } else {\n      print('evaluation denied (ticket mishmash)');\n      $evaluation.deny();\n    }\n} else {\n    print('evaluation denied (cannot verify ticket)');\n    $evaluation.deny();\n}\n"
      }
    },
    {
      "id": "6687ca3c-787a-408b-a8c4-3edc8a5e8c2b",
      "name": "Issuer Verifier",
      "description": "Verifies an issuer",
      "type": "js",
      "logic": "POSITIVE",
      "decisionStrategy": "UNANIMOUS",
      "config": {
        "code": "var context = $evaluation.context;\nvar identity = context.getIdentity();\n\nvar identityAttributes = identity.getAttributes();\n\nvar issuer = identityAttributes.getValue('issuer');\nvar jwksUri = identityAttributes.getValue('jwks_uri');\n\nif (issuer && jwksUri) {\n    var issuerStr = issuer.asString(0);\n    var jwksUriStr = jwksUri.asString(0);\n\n    // print('issuerStr: ' + issuerStr);\n    // print('jwksUriStr: ' + jwksUriStr);\n\n    if (issuerStr.localeCompare(jwksUriStr) === 0) {\n      print('evaluation granted (issuer verified)');\n      $evaluation.grant();\n    } else {\n      print('evaluation denied (issuer mishmash)');\n      $evaluation.deny();\n    }\n} else {\n    print('evaluation denied (cannot verify issuer)');\n    $evaluation.deny();\n}\n"
      }
    },
    {
      "id": "c0868a7f-f0b0-4ddc-9ab4-1590c34e2545",
      "name": "Email Resource Permission",
      "description": "Email Resource Permission",
      "type": "resource",
      "logic": "POSITIVE",
      "decisionStrategy": "UNANIMOUS",
      "config": {
        "defaultResourceType": "http://email.com/message",
        "applyPolicies": "[\"Issuer Verifier\",\"Ticket Verifier\"]"
      }
    },
    {
      "id": "55faaea2-282e-4f0a-abcd-58b138061a88",
      "name": "Default Permission",
      "description": "A permission that applies to the default resource type",
      "type": "resource",
      "logic": "POSITIVE",
      "decisionStrategy": "UNANIMOUS",
      "config": {
        "defaultResourceType": "urn:umabox-rs-service:resources:default",
        "applyPolicies": "[\"Default Policy\"]"
      }
    }
  ],
  "scopes": [
    {
      "id": "3890a738-ebd7-4132-990b-8b7e809ea663",
      "name": "message:create",
      "displayName": "Create Message"
    },
    {
      "id": "f75cb148-e53f-4f40-b1d9-a5ad4c4c6fd3",
      "name": "message:delete",
      "displayName": "Delete Message"
    },
    {
      "id": "02e073b8-5f02-4ad5-a0b7-dd0074844e07",
      "name": "message:view",
      "displayName": "View Messages"
    }
  ],
  "decisionStrategy": "UNANIMOUS"
}